octave:84> 
octave:84> 
octave:84> 
octave:84> 
octave:84> a = -5:1:9
a =

  -5  -4  -3  -2  -1   0   1   2   3   4   5   6   7   8   9

octave:85> M = max(a)
M =  9
octave:86> m = min(a)
m = -5
octave:87> Ma = max(abs(a))
Ma =  9
octave:88> ma = min(abs(a))
ma = 0
octave:89> sum(a)
ans =  30
octave:90> sum(abs(a))
ans =  60
octave:91> inline f1 = (" ((x+1)^2 -1 )/x ")
error: unterminated character string constant
parse error:

  syntax error

>>> inline f1 = (" ((x+1)^2 -1 )/x ")
                                    ^

octave:91> inline f1 = (" ((x+1)^2 -1 )/x ");
error: unterminated character string constant
parse error:

  syntax error

>>> inline f1 = (" ((x+1)^2 -1 )/x ");
                                     ^

octave:91> f1 = inline (" ((x+1)^2 -1 )/x ");
octave:92> f2 = inline (" x+2 ");
octave:93> a = 1:0.1:0;
octave:94> x1 = f1(a);
error: for A^b, A must be a square matrix. Use .^ for elementwise power.
error: called from:
error:    at line -1, column -1
octave:94> f1 = inline (" ((x+1).^2 -1 )/x ");
octave:95> x1 = f1(a);
octave:96> x2 = f2(a);
octave:97> 
octave:97> x1
x1 = 0
octave:98> x2
x2 = [](1x0)
octave:99> a
a = [](1x0)
octave:100> a = 1:-0.1:0;
octave:101> x1 = f1(a);
octave:102> x2 = f2(a);
octave:103> x1
x1 =  2.78571428571429
octave:104> x2
x2 =

 Columns 1 through 7:

    3.00000000000000    2.90000000000000    2.80000000000000    2.70000000000000    2.60000000000000    2.50000000000000    2.40000000000000

 Columns 8 through 11:

    2.30000000000000    2.20000000000000    2.10000000000000    2.00000000000000

octave:105> f1 = inline (" ((x+1)^2 -1 )/x ");
octave:106> x1 = f1(a);
error: for A^b, A must be a square matrix. Use .^ for elementwise power.
error: called from:
error:    at line -1, column -1
octave:106> f1 = inline (" ((x+1)^2 -1 )./x ");
octave:107> x1 = f1(a);
error: for A^b, A must be a square matrix. Use .^ for elementwise power.
error: called from:
error:    at line -1, column -1
octave:107> f1 = inline (" ((x+1).^2 -1 )./x ");
octave:108> x1 = f1(a);
octave:109> x1
x1 =

 Columns 1 through 7:

   3.00000000000000   2.90000000000000   2.80000000000000   2.70000000000000   2.60000000000000   2.50000000000000   2.40000000000000

 Columns 8 through 11:

   2.30000000000000   2.20000000000000   2.10000000000000                NaN

octave:110> x2
x2 =

 Columns 1 through 7:

    3.00000000000000    2.90000000000000    2.80000000000000    2.70000000000000    2.60000000000000    2.50000000000000    2.40000000000000

 Columns 8 through 11:

    2.30000000000000    2.20000000000000    2.10000000000000    2.00000000000000

octave:111> f1
f1 = f(x) =  ((x+1).^2 -1 )./x 
octave:112> f2
f2 = f(x) =  x+2 
octave:113> x1
x1 =

 Columns 1 through 7:

   3.00000000000000   2.90000000000000   2.80000000000000   2.70000000000000   2.60000000000000   2.50000000000000   2.40000000000000

 Columns 8 through 11:

   2.30000000000000   2.20000000000000   2.10000000000000                NaN

octave:114> x2
x2 =

 Columns 1 through 7:

    3.00000000000000    2.90000000000000    2.80000000000000    2.70000000000000    2.60000000000000    2.50000000000000    2.40000000000000

 Columns 8 through 11:

    2.30000000000000    2.20000000000000    2.10000000000000    2.00000000000000

octave:115> e = abs(x1-x2)
e =

 Columns 1 through 6:

   0.00000000000000e+00   0.00000000000000e+00   4.44089209850063e-16   4.44089209850063e-16   8.88178419700125e-16   0.00000000000000e+00

 Columns 7 through 11:

   4.44089209850063e-16   1.33226762955019e-15   0.00000000000000e+00   1.77635683940025e-15                    NaN

octave:116> a
a =

 Columns 1 through 7:

    1.000000000000000    0.900000000000000    0.800000000000000    0.700000000000000    0.600000000000000    0.500000000000000    0.400000000000000

 Columns 8 through 11:

    0.300000000000000    0.200000000000000    0.100000000000000    0.000000000000000

octave:117> x1-x2
ans =

 Columns 1 through 6:

   0.00000000000000e+00   0.00000000000000e+00   4.44089209850063e-16  -4.44089209850063e-16   8.88178419700125e-16   0.00000000000000e+00

 Columns 7 through 11:

  -4.44089209850063e-16   1.33226762955019e-15   0.00000000000000e+00  -1.77635683940025e-15                    NaN

octave:118> x1
x1 =

 Columns 1 through 7:

   3.00000000000000   2.90000000000000   2.80000000000000   2.70000000000000   2.60000000000000   2.50000000000000   2.40000000000000

 Columns 8 through 11:

   2.30000000000000   2.20000000000000   2.10000000000000                NaN

octave:119> x2
x2 =

 Columns 1 through 7:

    3.00000000000000    2.90000000000000    2.80000000000000    2.70000000000000    2.60000000000000    2.50000000000000    2.40000000000000

 Columns 8 through 11:

    2.30000000000000    2.20000000000000    2.10000000000000    2.00000000000000

octave:120> x1'
ans =

   3.00000000000000
   2.90000000000000
   2.80000000000000
   2.70000000000000
   2.60000000000000
   2.50000000000000
   2.40000000000000
   2.30000000000000
   2.20000000000000
   2.10000000000000
                NaN

octave:121> x2'
ans =

   3.00000000000000
   2.90000000000000
   2.80000000000000
   2.70000000000000
   2.60000000000000
   2.50000000000000
   2.40000000000000
   2.30000000000000
   2.20000000000000
   2.10000000000000
   2.00000000000000

octave:122> x2-x1
ans =

 Columns 1 through 6:

   0.00000000000000e+00   0.00000000000000e+00  -4.44089209850063e-16   4.44089209850063e-16  -8.88178419700125e-16   0.00000000000000e+00

 Columns 7 through 11:

   4.44089209850063e-16  -1.33226762955019e-15   0.00000000000000e+00   1.77635683940025e-15                    NaN

octave:123> format long
octave:124> x1
x1 =

 Columns 1 through 7:

   3.00000000000000   2.90000000000000   2.80000000000000   2.70000000000000   2.60000000000000   2.50000000000000   2.40000000000000

 Columns 8 through 11:

   2.30000000000000   2.20000000000000   2.10000000000000                NaN

octave:125> x1'
ans =

   3.00000000000000
   2.90000000000000
   2.80000000000000
   2.70000000000000
   2.60000000000000
   2.50000000000000
   2.40000000000000
   2.30000000000000
   2.20000000000000
   2.10000000000000
                NaN

octave:126> x2'
ans =

   3.00000000000000
   2.90000000000000
   2.80000000000000
   2.70000000000000
   2.60000000000000
   2.50000000000000
   2.40000000000000
   2.30000000000000
   2.20000000000000
   2.10000000000000
   2.00000000000000

octave:127> x2-x1
ans =

 Columns 1 through 6:

   0.00000000000000e+00   0.00000000000000e+00  -4.44089209850063e-16   4.44089209850063e-16  -8.88178419700125e-16   0.00000000000000e+00

 Columns 7 through 11:

   4.44089209850063e-16  -1.33226762955019e-15   0.00000000000000e+00   1.77635683940025e-15                    NaN

octave:128> format short
octave:129> x2-x1
ans =

   0.0000e+00   0.0000e+00  -4.4409e-16   4.4409e-16  -8.8818e-16   0.0000e+00   4.4409e-16  -1.3323e-15   0.0000e+00   1.7764e-15          NaN

octave:130> %%%%%%%
octave:130> % nonostante i risultati paiano uguali si nota un'approssimazione di fondo dell'ordine ( medio ) di 10^-15
octave:130> 
octave:130> 
octave:130> 
octave:130> 
octave:130> 
octave:130> 
octave:130> 
octave:130> 
octave:130> 
octave:130> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:130> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:130> 
octave:130> 
octave:130> x1 = [];
octave:131> x2 = [];
octave:132> 
octave:132> err = 10^-6;
octave:133> 
octave:133> my_e1 = 1;
octave:134> x = -9;
octave:135> i = 1;
octave:136> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e + x^i/i!;
parse error:

  syntax error

>>>  my_e1 = my_e + x^i/i!;
                         ^

octave:136>  i = i+1;
octave:137>  x1 = [ x1 , my_e ];
error: 'my_e' undefined near line 1 column 11
octave:137> endwhile
parse error:

  syntax error

>>> endwhile
           ^

octave:137> 
octave:137> e2 = 1;
octave:138> my_e2 = 1;
octave:139> x = 9;
octave:140> i = 1;
octave:141> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/i!;
parse error:

  syntax error

>>>   e2 = e2 + x^i/i!;
                     ^

octave:141>   my_e2 = 1/e2;
octave:142>   i = i+1;
octave:143>   x2 = [ x2, my_e2 ];
octave:144> endwhile 
parse error:

  syntax error

>>> endwhile 
           ^

octave:144>  
octave:144> 
octave:144> 
octave:144> 
octave:144> 
octave:144> 
octave:144> fact(3)

Global warming is caused by Richard Stallman's rage towards non-free software.

octave:145> fact(3)

Richard Stallman's beard is in fact not a just a beard, but a microprinted hard copy of Emacs source code. New patches must be checked against new
hair growth before being approved.

octave:146> fact(3)

Richard Stallman has a URL tatooed on the left side of his chest where you can download his genetic code.

octave:147> fact(3)

When Richard Stallman pipes to more, he gets less 

octave:148> factoril(3)
error: 'factoril' undefined near line 1 column 1
octave:148> factorial(3)
ans =  6
octave:149> 
octave:149> 
octave:149> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:149> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:149> 
octave:149> 
octave:149> x1 = [];
octave:150> x2 = [];
octave:151> 
octave:151> err = 10^-6;
octave:152> 
octave:152> my_e1 = 1;
octave:153> x = -9;
octave:154> i = 1;
octave:155> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e ];
> endwhile
error: for A^b, A must be a square matrix. Use .^ for elementwise power.
error: evaluating argument list element number 1
octave:155> 
octave:155> e2 = 1;
octave:156> my_e2 = 1;
octave:157> x = 9;
octave:158> i = 1;
octave:159> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
error: for A^b, A must be a square matrix. Use .^ for elementwise power.
error: evaluating argument list element number 1
octave:159>  
octave:159> 
octave:159> 
octave:159> 
octave:159> 
octave:159> 
octave:159>  
octave:159> 
octave:159> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:159> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:159> 
octave:159> 
octave:159> x1 = [];
octave:160> x2 = [];
octave:161> 
octave:161> err = 10^-6;
octave:162> 
octave:162> my_e1 = 1;
octave:163> x = -9;
octave:164> i = 1;
octave:165> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e ];
> endwhile
error: for A^b, A must be a square matrix. Use .^ for elementwise power.
error: evaluating argument list element number 1
octave:165> 
octave:165> e2 = 1;
octave:166> my_e2 = 1;
octave:167> x = 9;
octave:168> i = 1;
octave:169> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
error: for A^b, A must be a square matrix. Use .^ for elementwise power.
error: evaluating argument list element number 1
octave:169>  
octave:169> 
octave:169> 
octave:169> 
octave:169> 
octave:169> 
octave:169> clear
octave:170> clc
octave:171> 
octave:171> 
octave:171> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:171> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:171> 
octave:171> 
octave:171> x1 = [];
octave:172> x2 = [];
octave:173> 
octave:173> err = 10^-6;
octave:174> 
octave:174> my_e1 = 1;
octave:175> x = -9;
octave:176> i = 1;
octave:177> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e ];
> endwhile
error: 'my_e' undefined near line 2 column 10
octave:177> 
octave:177> e2 = 1;
octave:178> my_e2 = 1;
octave:179> x = 9;
octave:180> i = 1;
octave:181> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:182>  
octave:182> 
octave:182> 
octave:182> 
octave:182> 
octave:182> 
octave:182> 
octave:182> 
octave:182> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:182> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:182> 
octave:182> 
octave:182> x1 = [];
octave:183> x2 = [];
octave:184> 
octave:184> err = 10^-6;
octave:185> 
octave:185> my_e1 = 1;
octave:186> x = -9;
octave:187> i = 1;
octave:188> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e1 + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e ];
> endwhile
error: 'my_e' undefined near line 4 column 11
octave:188> 
octave:188> e2 = 1;
octave:189> my_e2 = 1;
octave:190> x = 9;
octave:191> i = 1;
octave:192> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:193>  
octave:193> 
octave:193> 
octave:193> 
octave:193> 
octave:193> 
octave:193> clear
octave:194> clc
octave:195> 
octave:195> 
octave:195> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:195> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:195> 
octave:195> 
octave:195> x1 = [];
octave:196> x2 = [];
octave:197> 
octave:197> err = 10^-6;
octave:198> 
octave:198> my_e1 = 1;
octave:199> x = -9;
octave:200> i = 1;
octave:201> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e1 + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e ];
> endwhile
error: 'my_e' undefined near line 4 column 11
octave:201> 
octave:201> e2 = 1;
octave:202> my_e2 = 1;
octave:203> x = 9;
octave:204> i = 1;
octave:205> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:206>  
octave:206> 
octave:206> 
octave:206> 
octave:206> 
octave:206> 
octave:206> clear
octave:207> clc
octave:208> 
octave:208> 
octave:208> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:208> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:208> 
octave:208> 
octave:208> x1 = [];
octave:209> x2 = [];
octave:210> 
octave:210> err = 10^-6;
octave:211> 
octave:211> my_e1 = 1;
octave:212> x = -9;
octave:213> i = 1;
octave:214> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e1 + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e1 ];
> endwhile
octave:215> 
octave:215> e2 = 1;
octave:216> my_e2 = 1;
octave:217> x = 9;
octave:218> i = 1;
octave:219> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:220>  
octave:220> 
octave:220> 
octave:220> 
octave:220> 
octave:220> 
octave:220> x1
x1 =

 Columns 1 through 5:

  -8.0000e+00   3.2500e+01  -8.9000e+01   1.8438e+02  -3.0770e+02

 Columns 6 through 10:

   4.3041e+02  -5.1859e+02   5.4904e+02  -5.1859e+02   4.4228e+02

 Columns 11 through 15:

  -3.4389e+02   2.4573e+02  -1.6246e+02   9.9949e+01  -5.7499e+01

 Columns 16 through 20:

   3.1065e+01  -1.5822e+01   7.6219e+00  -3.4830e+00   1.5142e+00

 Columns 21 through 25:

  -6.2744e-01   2.4869e-01  -9.4145e-02   3.4418e-02  -1.1865e-02

 Columns 26 through 30:

   4.1562e-03  -1.1841e-03   5.3247e-04  -2.4560e-07   1.5957e-04

 Columns 31 through 33:

   1.1317e-04   1.2622e-04   1.2266e-04

octave:221> x2
x2 =

 Columns 1 through 5:

   1.0000e-01   1.9802e-02   5.8140e-03   2.2453e-03   1.0667e-03

 Columns 6 through 10:

   5.9681e-04   3.8102e-04   2.7084e-04   2.1009e-04   1.7480e-04

 Columns 11 through 15:

   1.5368e-04   1.4092e-04   1.3325e-04   1.2875e-04   1.2619e-04

 Columns 16 and 17:

   1.2480e-04   1.2407e-04

octave:222> size(x1)
ans =

    1   33

octave:223> size(x2)
ans =

    1   17

octave:224> % utilizzando il secondo metodo l'algoritmo è notevolmente più veloce
octave:224> err1 = abs(x1-e^-9)/e^-9
err1 =

 Columns 1 through 5:

   6.4826e+04   2.6335e+05   7.2118e+05   1.4940e+06   2.4933e+06

 Columns 6 through 10:

   3.4877e+06   4.2022e+06   4.4489e+06   4.2022e+06   3.5838e+06

 Columns 11 through 15:

   2.7865e+06   1.9912e+06   1.3165e+06   8.0990e+05   4.6592e+05

 Columns 16 through 20:

   2.5173e+05   1.2821e+05   6.1760e+04   2.8224e+04   1.2269e+04

 Columns 21 through 25:

   5.0852e+03   2.0141e+03   7.6386e+02   2.7789e+02   9.7140e+01

 Columns 26 through 30:

   3.2678e+01   1.0594e+01   3.3146e+00   1.0020e+00   2.9300e-01

 Columns 31 through 33:

   8.2967e-02   2.2773e-02   6.0650e-03

octave:225> err2 = abs(x2-e^-9)/e^-9
err2 =

 Columns 1 through 5:

   8.0931e+02   1.5946e+02   4.6111e+01   1.7194e+01   7.6438e+00

 Columns 6 through 10:

   3.8360e+00   2.0874e+00   1.1947e+00   7.0239e-01   4.1645e-01

 Columns 11 through 15:

   2.4532e-01   1.4185e-01   7.9740e-02   4.3260e-02   2.2532e-02

 Columns 16 and 17:

   1.1231e-02   5.3480e-03

octave:226> %%%%%% Calcolo degli errori relativi dei valori ottenuti sommando n termini dei due algoritmi
octave:226> 
octave:226> %%%% PRIMO ALGORITMO
octave:226> 
octave:226> x1
x1 =

 Columns 1 through 11:

  -8.0000e+00   3.2500e+01  -8.9000e+01   1.8438e+02  -3.0770e+02   4.3041e+02  -5.1859e+02   5.4904e+02  -5.1859e+02   4.4228e+02  -3.4389e+02

 Columns 12 through 22:

   2.4573e+02  -1.6246e+02   9.9949e+01  -5.7499e+01   3.1065e+01  -1.5822e+01   7.6219e+00  -3.4830e+00   1.5142e+00  -6.2744e-01   2.4869e-01

 Columns 23 through 33:

  -9.4145e-02   3.4418e-02  -1.1865e-02   4.1562e-03  -1.1841e-03   5.3247e-04  -2.4560e-07   1.5957e-04   1.1317e-04   1.2622e-04   1.2266e-04

octave:227> clear
octave:228> clc
octave:229> 
octave:229> x1 = [];
octave:230> x2 = [];
octave:231> 
octave:231> err = 10^-6;
octave:232> 
octave:232> my_e1 = 1;
octave:233> x = -9;
octave:234> i = 1;
octave:235> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e1 + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e1 ];
> endwhile
octave:236> 
octave:236> e2 = 1;
octave:237> my_e2 = 1;
octave:238> x = 9;
octave:239> i = 1;
octave:240> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:241>  format short
octave:242> x1
x1 =

 Columns 1 through 11:

  -8.0000e+00   3.2500e+01  -8.9000e+01   1.8438e+02  -3.0770e+02   4.3041e+02  -5.1859e+02   5.4904e+02  -5.1859e+02   4.4228e+02  -3.4389e+02

 Columns 12 through 22:

   2.4573e+02  -1.6246e+02   9.9949e+01  -5.7499e+01   3.1065e+01  -1.5822e+01   7.6219e+00  -3.4830e+00   1.5142e+00  -6.2744e-01   2.4869e-01

 Columns 23 through 33:

  -9.4145e-02   3.4418e-02  -1.1865e-02   4.1562e-03  -1.1841e-03   5.3247e-04  -2.4560e-07   1.5957e-04   1.1317e-04   1.2622e-04   1.2266e-04

octave:243> clc
octave:244> x1'
ans =

  -8.0000e+00
   3.2500e+01
  -8.9000e+01
   1.8438e+02
  -3.0770e+02
   4.3041e+02
  -5.1859e+02
   5.4904e+02
  -5.1859e+02
   4.4228e+02
  -3.4389e+02
   2.4573e+02
  -1.6246e+02
   9.9949e+01
  -5.7499e+01
   3.1065e+01
  -1.5822e+01
   7.6219e+00
  -3.4830e+00
   1.5142e+00
  -6.2744e-01
   2.4869e-01
  -9.4145e-02
   3.4418e-02
  -1.1865e-02
   4.1562e-03
  -1.1841e-03
   5.3247e-04
  -2.4560e-07
   1.5957e-04
   1.1317e-04
   1.2622e-04
   1.2266e-04

octave:245> x2'
ans =

   1.0000e-01
   1.9802e-02
   5.8140e-03
   2.2453e-03
   1.0667e-03
   5.9681e-04
   3.8102e-04
   2.7084e-04
   2.1009e-04
   1.7480e-04
   1.5368e-04
   1.4092e-04
   1.3325e-04
   1.2875e-04
   1.2619e-04
   1.2480e-04
   1.2407e-04

octave:246> err_rel1 = [];
octave:247> for i=1:size(x1)(2)
> err_rel1 = [ err_rel1; sum(x1(1:i))/(i*exp(-9)) ];
> endfor
octave:248> err_rel1 
err_rel1 =

  -6.4825e+04
   9.9263e+04
  -1.7422e+05
   2.4284e+05
  -3.0439e+05
   3.2762e+05
  -3.1950e+05
   2.7655e+05
  -2.2108e+05
   1.5941e+05
  -1.0841e+05
   6.6560e+04
  -3.9827e+04
   2.0868e+04
  -1.1585e+04
   4.8721e+03
  -2.9560e+03
   6.3942e+02
  -8.7965e+02
  -2.2218e+02
  -4.5370e+02
  -3.4148e+02
  -3.5980e+02
  -3.3319e+02
  -3.2371e+02
  -3.0996e+02
  -2.9884e+02
  -2.8801e+02
  -2.7808e+02
  -2.6877e+02
  -2.6007e+02
  -2.5191e+02
  -2.4425e+02

octave:249> for i=1:size(x1)(2)
> err_rel1 = [ err_rel1; abs(sum(x1(1:i))/(i*exp(-9))) ];
> endfor
octave:250> err_rel1 
err_rel1 =

  -6.4825e+04
   9.9263e+04
  -1.7422e+05
   2.4284e+05
  -3.0439e+05
   3.2762e+05
  -3.1950e+05
   2.7655e+05
  -2.2108e+05
   1.5941e+05
  -1.0841e+05
   6.6560e+04
  -3.9827e+04
   2.0868e+04
  -1.1585e+04
   4.8721e+03
  -2.9560e+03
   6.3942e+02
  -8.7965e+02
  -2.2218e+02
  -4.5370e+02
  -3.4148e+02
  -3.5980e+02
  -3.3319e+02
  -3.2371e+02
  -3.0996e+02
  -2.9884e+02
  -2.8801e+02
  -2.7808e+02
  -2.6877e+02
  -2.6007e+02
  -2.5191e+02
  -2.4425e+02
   6.4825e+04
   9.9263e+04
   1.7422e+05
   2.4284e+05
   3.0439e+05
   3.2762e+05
   3.1950e+05
   2.7655e+05
   2.2108e+05
   1.5941e+05
   1.0841e+05
   6.6560e+04
   3.9827e+04
   2.0868e+04
   1.1585e+04
   4.8721e+03
   2.9560e+03
   6.3942e+02
   8.7965e+02
   2.2218e+02
   4.5370e+02
   3.4148e+02
   3.5980e+02
   3.3319e+02
   3.2371e+02
   3.0996e+02
   2.9884e+02
   2.8801e+02
   2.7808e+02
   2.6877e+02
   2.6007e+02
   2.5191e+02
   2.4425e+02

octave:251> 
octave:251> 
octave:251> 
octave:251> 
octave:251> 
octave:251> 
octave:251> 
octave:251> 
octave:251> 
octave:251> 
octave:251> 
octave:251> 
octave:251> 
octave:251> 
octave:251> 
octave:251> 
octave:251> err_rel1 = []
err_rel1 = [](0x0)
octave:252> for i=1:size(x1)(2)
> err_rel1 = [ err_rel1; abs(sum(x1(1:i))/(i*exp(-9))) ];
> endfor
octave:253> err_rel1 
err_rel1 =

   6.4825e+04
   9.9263e+04
   1.7422e+05
   2.4284e+05
   3.0439e+05
   3.2762e+05
   3.1950e+05
   2.7655e+05
   2.2108e+05
   1.5941e+05
   1.0841e+05
   6.6560e+04
   3.9827e+04
   2.0868e+04
   1.1585e+04
   4.8721e+03
   2.9560e+03
   6.3942e+02
   8.7965e+02
   2.2218e+02
   4.5370e+02
   3.4148e+02
   3.5980e+02
   3.3319e+02
   3.2371e+02
   3.0996e+02
   2.9884e+02
   2.8801e+02
   2.7808e+02
   2.6877e+02
   2.6007e+02
   2.5191e+02
   2.4425e+02

octave:254> err_rel2 = []
err_rel2 = [](0x0)
octave:255> for i=1:size(x2)(2)
> err_rel2 = [ err_rel2; abs(sum(x2(1:i))/(i*exp(-9))) ];
> endfor
octave:256> err_rel2
err_rel2 =

   810.308
   485.383
   339.292
   259.018
   208.943
   174.925
   150.377
   131.854
   117.393
   105.795
    96.291
    88.362
    81.648
    75.890
    70.899
    66.531
    62.676

octave:257> x1
x1 =

 Columns 1 through 5:

  -8.0000e+00   3.2500e+01  -8.9000e+01   1.8438e+02  -3.0770e+02

 Columns 6 through 10:

   4.3041e+02  -5.1859e+02   5.4904e+02  -5.1859e+02   4.4228e+02

 Columns 11 through 15:

  -3.4389e+02   2.4573e+02  -1.6246e+02   9.9949e+01  -5.7499e+01

 Columns 16 through 20:

   3.1065e+01  -1.5822e+01   7.6219e+00  -3.4830e+00   1.5142e+00

 Columns 21 through 25:

  -6.2744e-01   2.4869e-01  -9.4145e-02   3.4418e-02  -1.1865e-02

 Columns 26 through 30:

   4.1562e-03  -1.1841e-03   5.3247e-04  -2.4560e-07   1.5957e-04

 Columns 31 through 33:

   1.1317e-04   1.2622e-04   1.2266e-04

octave:258> x1'
ans =

  -8.0000e+00
   3.2500e+01
  -8.9000e+01
   1.8438e+02
  -3.0770e+02
   4.3041e+02
  -5.1859e+02
   5.4904e+02
  -5.1859e+02
   4.4228e+02
  -3.4389e+02
   2.4573e+02
  -1.6246e+02
   9.9949e+01
  -5.7499e+01
   3.1065e+01
  -1.5822e+01
   7.6219e+00
  -3.4830e+00
   1.5142e+00
  -6.2744e-01
   2.4869e-01
  -9.4145e-02
   3.4418e-02
  -1.1865e-02
   4.1562e-03
  -1.1841e-03
   5.3247e-04
  -2.4560e-07
   1.5957e-04
   1.1317e-04
   1.2622e-04
   1.2266e-04

octave:259> clear
octave:260> clc
octave:261> 
octave:261> x1 = [];
octave:262> x2 = [];
octave:263> 
octave:263> err = 10^-6;
octave:264> 
octave:264> my_e1 = 1;
octave:265> x = -9;
octave:266> i = 1;
octave:267> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e1 + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e1 ];
> endwhile
octave:268> 
octave:268> e2 = 1;
octave:269> my_e2 = 1;
octave:270> x = 9;
octave:271> i = 1;
octave:272> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:273>  
octave:273> my_e1
my_e1 =    1.2266e-04
octave:274> x1
x1 =

 Columns 1 through 5:

  -8.0000e+00   3.2500e+01  -8.9000e+01   1.8438e+02  -3.0770e+02

 Columns 6 through 10:

   4.3041e+02  -5.1859e+02   5.4904e+02  -5.1859e+02   4.4228e+02

 Columns 11 through 15:

  -3.4389e+02   2.4573e+02  -1.6246e+02   9.9949e+01  -5.7499e+01

 Columns 16 through 20:

   3.1065e+01  -1.5822e+01   7.6219e+00  -3.4830e+00   1.5142e+00

 Columns 21 through 25:

  -6.2744e-01   2.4869e-01  -9.4145e-02   3.4418e-02  -1.1865e-02

 Columns 26 through 30:

   4.1562e-03  -1.1841e-03   5.3247e-04  -2.4560e-07   1.5957e-04

 Columns 31 through 33:

   1.1317e-04   1.2622e-04   1.2266e-04

octave:275> 
octave:275> x1'
ans =

  -8.0000e+00
   3.2500e+01
  -8.9000e+01
   1.8438e+02
  -3.0770e+02
   4.3041e+02
  -5.1859e+02
   5.4904e+02
  -5.1859e+02
   4.4228e+02
  -3.4389e+02
   2.4573e+02
  -1.6246e+02
   9.9949e+01
  -5.7499e+01
   3.1065e+01
  -1.5822e+01
   7.6219e+00
  -3.4830e+00
   1.5142e+00
  -6.2744e-01
   2.4869e-01
  -9.4145e-02
   3.4418e-02
  -1.1865e-02
   4.1562e-03
  -1.1841e-03
   5.3247e-04
  -2.4560e-07
   1.5957e-04
   1.1317e-04
   1.2622e-04
   1.2266e-04

octave:276> exp(-9)
ans =    1.2341e-04
octave:277> clear
octave:278> clc
octave:279> 
octave:279> 
octave:279> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:279> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:279> 
octave:279> 
octave:279> x1 = [];
octave:280> x2 = [];
octave:281> 
octave:281> err = 10^-6;
octave:282> 
octave:282> my_e1 = 1;
octave:283> x = -9;
octave:284> i = 1;
octave:285> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e1 + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e1 ];
> endwhile
octave:286> 
octave:286> e2 = 1;
octave:287> my_e2 = 1;
octave:288> x = 9;
octave:289> i = 1;
octave:290> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:291>  
octave:291> 
octave:291> 
octave:291> 
octave:291> 
octave:291> % Calcolo degli errori relativi
octave:291> %  Calcolati sulla somma dei primi n termini
octave:291> 
octave:291> 
octave:291> err_rel1 = [];
octave:292> for i=1:size(x1)(2)
>   err_rel1 = [ err_rel1 , abs(x1(i) - exp(-9))/exp(-9) ];
> endfor
octave:293> 
octave:293> err_rel2 = [];
octave:294> for i=1:size(x2)(2)
>   err_rel2 = [ err_rel2 , abs(x2(i) - exp(-9))/exp(-9) ]; 
> endfor
octave:295> 
octave:295> 
octave:295> 
octave:295> subplot(1,1)
error: subplot: INDEX value must be >= 1 and <= ROWS*COLS
error: called from:
error:   /usr/share/octave/3.8.1/m/plot/util/subplot.m at line 165, column 7
octave:295> a1 = 1:size(x1)(2);
octave:296> plot(a1,x1);
octave:297> 
octave:297> subplot(1,2)
error: subplot: INDEX value must be >= 1 and <= ROWS*COLS
error: called from:
error:   /usr/share/octave/3.8.1/m/plot/util/subplot.m at line 165, column 7
octave:297> a2 = 1:size(x2)(2);
octave:298> plot(a2,x2);
octave:299> 
octave:299> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:299> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:299> 
octave:299> 
octave:299> x1 = [];
octave:300> x2 = [];
octave:301> 
octave:301> err = 10^-6;
octave:302> 
octave:302> my_e1 = 1;
octave:303> x = -9;
octave:304> i = 1;
octave:305> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e1 + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e1 ];
> endwhile
octave:306> 
octave:306> e2 = 1;
octave:307> my_e2 = 1;
octave:308> x = 9;
octave:309> i = 1;
octave:310> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:311>  
octave:311> 
octave:311> 
octave:311> 
octave:311> 
octave:311> % Calcolo degli errori relativi
octave:311> %  Calcolati sulla somma dei primi n termini
octave:311> 
octave:311> 
octave:311> err_rel1 = [];
octave:312> for i=1:size(x1)(2)
>   err_rel1 = [ err_rel1 , abs(x1(i) - exp(-9))/exp(-9) ];
> endfor
octave:313> 
octave:313> err_rel2 = [];
octave:314> for i=1:size(x2)(2)
>   err_rel2 = [ err_rel2 , abs(x2(i) - exp(-9))/exp(-9) ]; 
> endfor
octave:315> 
octave:315> 
octave:315> 
octave:315> subplot(1,1)
error: subplot: INDEX value must be >= 1 and <= ROWS*COLS
error: called from:
error:   /usr/share/octave/3.8.1/m/plot/util/subplot.m at line 165, column 7
octave:315> a1 = 1:size(x1)(2);
octave:316> fplot(a1,x1);
error: fplot: FN must be a function handle, inline function, or string
error: called from:
error:   /usr/share/octave/3.8.1/m/plot/draw/fplot.m at line 94, column 5
octave:316> 
octave:316> subplot(1,2)
error: subplot: INDEX value must be >= 1 and <= ROWS*COLS
error: called from:
error:   /usr/share/octave/3.8.1/m/plot/util/subplot.m at line 165, column 7
octave:316> a2 = 1:size(x2)(2);
octave:317> fplot(a2,x2);ck
error: fplot: FN must be a function handle, inline function, or string
error: called from:
error:   /usr/share/octave/3.8.1/m/plot/draw/fplot.m at line 94, column 5
octave:317> clear
octave:318> clc
octave:319> 
octave:319> 
octave:319> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:319> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:319> 
octave:319> 
octave:319> x1 = [];
octave:320> x2 = [];
octave:321> 
octave:321> err = 10^-6;
octave:322> 
octave:322> my_e1 = 1;
octave:323> x = -9;
octave:324> i = 1;
octave:325> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e1 + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e1 ];
> endwhile
octave:326> 
octave:326> e2 = 1;
octave:327> my_e2 = 1;
octave:328> x = 9;
octave:329> i = 1;
octave:330> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:331>  
octave:331> 
octave:331> 
octave:331> 
octave:331> 
octave:331> % Calcolo degli errori relativi
octave:331> %  Calcolati sulla somma dei primi n termini
octave:331> 
octave:331> 
octave:331> err_rel1 = [];
octave:332> for i=1:size(x1)(2)
>   err_rel1 = [ err_rel1 , abs(x1(i) - exp(-9))/exp(-9) ];
> endfor
octave:333> 
octave:333> err_rel2 = [];
octave:334> for i=1:size(x2)(2)
>   err_rel2 = [ err_rel2 , abs(x2(i) - exp(-9))/exp(-9) ]; 
> endfor
octave:335> 
octave:335> 
octave:335> 
octave:335> subplot(1,1)
error: subplot: INDEX value must be >= 1 and <= ROWS*COLS
error: called from:
error:   /usr/share/octave/3.8.1/m/plot/util/subplot.m at line 165, column 7
octave:335> a1 = 1:size(x1)(2);
octave:336> fplot(a1,x1);
error: fplot: FN must be a function handle, inline function, or string
error: called from:
error:   /usr/share/octave/3.8.1/m/plot/draw/fplot.m at line 94, column 5
octave:336> 
octave:336> subplot(1,2)
error: subplot: INDEX value must be >= 1 and <= ROWS*COLS
error: called from:
error:   /usr/share/octave/3.8.1/m/plot/util/subplot.m at line 165, column 7
octave:336> a2 = 1:size(x2)(2);
octave:337> fplot(a2,x2);
error: fplot: FN must be a function handle, inline function, or string
error: called from:
error:   /usr/share/octave/3.8.1/m/plot/draw/fplot.m at line 94, column 5
octave:337> 
octave:337> 
octave:337> 
octave:337> clear
octave:338> clc
octave:339> 
octave:339> 
octave:339> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:339> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:339> 
octave:339> 
octave:339> x1 = [];
octave:340> x2 = [];
octave:341> 
octave:341> err = 10^-6;
octave:342> 
octave:342> my_e1 = 1;
octave:343> x = -9;
octave:344> i = 1;
octave:345> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e1 + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e1 ];
> endwhile
octave:346> 
octave:346> e2 = 1;
octave:347> my_e2 = 1;
octave:348> x = 9;
octave:349> i = 1;
octave:350> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:351>  
octave:351> 
octave:351> 
octave:351> 
octave:351> 
octave:351> % Calcolo degli errori relativi
octave:351> %  Calcolati sulla somma dei primi n termini
octave:351> 
octave:351> 
octave:351> err_rel1 = [];
octave:352> for i=1:size(x1)(2)
>   err_rel1 = [ err_rel1 , abs(x1(i) - exp(-9))/exp(-9) ];
> endfor
octave:353> 
octave:353> err_rel2 = [];
octave:354> for i=1:size(x2)(2)
>   err_rel2 = [ err_rel2 , abs(x2(i) - exp(-9))/exp(-9) ]; 
> endfor
octave:355> 
octave:355> 
octave:355> 
octave:355> subplot(1,1)
error: subplot: INDEX value must be >= 1 and <= ROWS*COLS
error: called from:
error:   /usr/share/octave/3.8.1/m/plot/util/subplot.m at line 165, column 7
octave:355> a1 = 1:size(x1)(2);
octave:356> plot(a1,x1);
octave:357> 
octave:357> subplot(1,2)
error: subplot: INDEX value must be >= 1 and <= ROWS*COLS
error: called from:
error:   /usr/share/octave/3.8.1/m/plot/util/subplot.m at line 165, column 7
octave:357> a2 = 1:size(x2)(2);
octave:358> plot(a2,x2);
octave:359> clear
octave:360> ckc
error: 'ckc' undefined near line 1 column 1
octave:360> clc
octave:361> 
octave:361> 
octave:361> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:361> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:361> 
octave:361> 
octave:361> x1 = [];
octave:362> x2 = [];
octave:363> 
octave:363> err = 10^-6;
octave:364> 
octave:364> my_e1 = 1;
octave:365> x = -9;
octave:366> i = 1;
octave:367> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e1 + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e1 ];
> endwhile
octave:368> 
octave:368> e2 = 1;
octave:369> my_e2 = 1;
octave:370> x = 9;
octave:371> i = 1;
octave:372> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:373>  
octave:373> 
octave:373> 
octave:373> 
octave:373> 
octave:373> % Calcolo degli errori relativi
octave:373> %  Calcolati sulla somma dei primi n termini
octave:373> 
octave:373> 
octave:373> err_rel1 = [];
octave:374> for i=1:size(x1)(2)
>   err_rel1 = [ err_rel1 , abs(x1(i) - exp(-9))/exp(-9) ];
> endfor
octave:375> 
octave:375> err_rel2 = [];
octave:376> for i=1:size(x2)(2)
>   err_rel2 = [ err_rel2 , abs(x2(i) - exp(-9))/exp(-9) ]; 
> endfor
octave:377> 
octave:377> 
octave:377> 
octave:377> subplot(1,2,1)
octave:378> a1 = 1:size(x1)(2);
octave:379> plot(a1,x1);
octave:380> 
octave:380> subplot(1,2,2)
octave:381> a2 = 1:size(x2)(2);
octave:382> plot(a2,x2);cl
error: 'cl' undefined near line 1 column 13
octave:382> e
ans =  2.7183
octave:383> 
octave:383> 
octave:383> clear
octave:384> clc
octave:385> 
octave:385> 
octave:385> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:385> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:385> 
octave:385> 
octave:385> x1 = [];
octave:386> x2 = [];
octave:387> 
octave:387> err = 10^-6;
octave:388> 
octave:388> my_e1 = 1;
octave:389> x = -9;
octave:390> i = 1;
octave:391> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e1 + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e1 ];
> endwhile
octave:392> 
octave:392> e2 = 1;
octave:393> my_e2 = 1;
octave:394> x = 9;
octave:395> i = 1;
octave:396> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:397>  
octave:397> 
octave:397> 
octave:397> 
octave:397> 
octave:397> % Calcolo degli errori relativi
octave:397> %  Calcolati sulla somma dei primi n termini
octave:397> 
octave:397> 
octave:397> err_rel1 = [];
octave:398> for i=1:size(x1)(2)
>   err_rel1 = [ err_rel1 , abs(x1(i) - exp(-9))/exp(-9) ];
> endfor
octave:399> 
octave:399> err_rel2 = [];
octave:400> for i=1:size(x2)(2)
>   err_rel2 = [ err_rel2 , abs(x2(i) - exp(-9))/exp(-9) ]; 
> endfor
octave:401> 
octave:401> 
octave:401> 
octave:401> subplot(2,1,1)
octave:402> a1 = 1:size(x1)(2);
octave:403> plot(a1,x1);
octave:404> 
octave:404> subplot(2,1,2)
octave:405> a2 = 1:size(x2)(2);
octave:406> plot(a2,x2);
octave:407> 
octave:407> 
octave:407> 
octave:407> 
octave:407> 
octave:407> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:407> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:407> 
octave:407> 
octave:407> x1 = [];
octave:408> x2 = [];
octave:409> 
octave:409> err = 10^-6;
octave:410> 
octave:410> my_e1 = 1;
octave:411> x = -9;
octave:412> i = 1;
octave:413> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e1 + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e1 ];
> endwhile
octave:414> 
octave:414> e2 = 1;
octave:415> my_e2 = 1;
octave:416> x = 9;
octave:417> i = 1;
octave:418> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:419>  
octave:419> 
octave:419> 
octave:419> 
octave:419> 
octave:419> % Calcolo degli errori relativi
octave:419> %  Calcolati sulla somma dei primi n termini
octave:419> 
octave:419> 
octave:419> err_rel1 = [];
octave:420> for i=1:size(x1)(2)
>   err_rel1 = [ err_rel1 , abs(x1(i) - exp(-9))/exp(-9) ];
> endfor
octave:421> 
octave:421> err_rel2 = [];
octave:422> for i=1:size(x2)(2)
>   err_rel2 = [ err_rel2 , abs(x2(i) - exp(-9))/exp(-9) ]; 
> endfor
octave:423> 
octave:423> 
octave:423> a1 = 1:size(x1)(2);
octave:424> a2 = 1:size(x2)(2);
octave:425> 
octave:425> subplot(2,1,1)
octave:426> plot(a1,x1);
octave:427> 
octave:427> subplot(2,1,2)
octave:428> plot(a2,x2);
octave:429> 
octave:429> 
octave:429> 
octave:429> 
octave:429> 
octave:429> clear
octave:430> clc
octave:431> 
octave:431> 
octave:431> % e^x = 1 + x^2/2! + x^3/3! + ....
octave:431> % Calcolare e^-9 stabilizzando la 6 cifra dopo la virgola
octave:431> 
octave:431> 
octave:431> x1 = [];
octave:432> x2 = [];
octave:433> 
octave:433> err = 10^-6;
octave:434> 
octave:434> my_e1 = 1;
octave:435> x = -9;
octave:436> i = 1;
octave:437> while ( abs(e^-9 - my_e1) > err )
>  my_e1 = my_e1 + x^i/factorial(i);
>  i = i+1;
>  x1 = [ x1 , my_e1 ];
> endwhile
octave:438> 
octave:438> e2 = 1;
octave:439> my_e2 = 1;
octave:440> x = 9;
octave:441> i = 1;
octave:442> while ( abs(e^-9 - my_e2) > err )
>   e2 = e2 + x^i/factorial(i);
>   my_e2 = 1/e2;
>   i = i+1;
>   x2 = [ x2, my_e2 ];
> endwhile 
octave:443>  
octave:443> 
octave:443> 
octave:443> 
octave:443> 
octave:443> % Calcolo degli errori relativi
octave:443> %  Calcolati sulla somma dei primi n termini
octave:443> 
octave:443> 
octave:443> err_rel1 = [];
octave:444> for i=1:size(x1)(2)
>   err_rel1 = [ err_rel1 , abs(x1(i) - exp(-9))/exp(-9) ];
> endfor
octave:445> 
octave:445> err_rel2 = [];
octave:446> for i=1:size(x2)(2)
>   err_rel2 = [ err_rel2 , abs(x2(i) - exp(-9))/exp(-9) ]; 
> endfor
octave:447> 
octave:447> 
octave:447> a1 = 1:size(x1)(2);
octave:448> a2 = 1:size(x2)(2);
octave:449> 
octave:449> subplot(2,1,1)
octave:450> plot(a1,x1);
octave:451> 
octave:451> subplot(2,1,2)
octave:452> plot(a2,x2);
octave:453> 
octave:453> 
octave:453> 
octave:453> 
octave:453> 
octave:453> size(x1)(2)
ans =  33
octave:454> size(x2)(2)
ans =  17
octave:455> 
octave:455> 
octave:455> 
octave:455> 
octave:455> %%%%%%%%%%%% EX 4 
octave:455> 
octave:455> 
octave:455> 
octave:455> f1 = inline (" (e^(x+h) - e^x) / h ");
octave:456> f2 = inline (" (e^(x+h) - e^(x-h) / (2*h) ");
parse error:

  syntax error



error: inline: unable to define function
octave:456> 
octave:456> 
octave:456> 
octave:456> f1 = inline (" (e^(x+h) - e^x) / h ");
octave:457> f2 = inline (" (e^(x+h) - e^(x-h) / (2*h) ");
parse error:

  syntax error



error: inline: unable to define function
octave:457> 
octave:457> 
octave:457> 
octave:457> f1 = inline (" (e^(x+h) - e^x) / h ");
octave:458> f2 = inline (" (e^(x+h) - e^(x-h) / (2*h) ");
parse error:

  syntax error



error: inline: unable to define function
octave:458> 
octave:458> 
octave:458> 
octave:458> f1 = inline (" (e^(x+h) - e^x) / h ");
octave:459> f2 = inline (" (e^(x+h) - e^(x-h) / (2*h) ");
parse error:

  syntax error



error: inline: unable to define function
octave:459> 
octave:459> 
octave:459> 
octave:459> f1 = inline (" (e^(x+h) - e^x) / h ");
octave:460> f2 = inline (" (e^(x+h) - e^(x-h) / (2*h) ");
parse error:

  syntax error



error: inline: unable to define function
octave:460> 
octave:460> 
octave:460> 
octave:460> f1 = inline (" (e^(x+h) - e^x) / h ");
octave:461> f2 = inline (" (e^(x+h) - e^(x-h) / (2*h) ");
parse error:

  syntax error



error: inline: unable to define function
octave:461> 
octave:461> 
octave:461> 
octave:461> f1 = inline (" (e^(x+h) - e^x) / h ");
octave:462> f2 = inline (" (e^(x+h) - e^(x-h) / (2*h) ");
parse error:

  syntax error



error: inline: unable to define function
octave:462> 
octave:462> 
octave:462> 
octave:462> f1(x,y) = inline (" (e^(x+h) - e^x) / h ");
error: 'y' undefined near line 1 column 6
error: evaluating argument list element number 2
error: invalid empty index list
octave:462> f2(x,y) = inline (" (e^(x+h) - e^(x-h) / (2*h) ");
parse error:

  syntax error



error: inline: unable to define function
octave:462> 
octave:462> 
octave:462> 
octave:462> 
octave:462> 
octave:462> f1(x,h) = inline (" (e^(x+h) - e^x) / h ");
error: 'h' undefined near line 1 column 6
error: evaluating argument list element number 2
error: invalid empty index list
octave:462> f2(x,h) = inline (" (e^(x+h) - e^(x-h) / (2*h) ");
parse error:

  syntax error



error: inline: unable to define function
octave:462> 
octave:462> 
octave:462> 
octave:462> f1(x,h) = inline (" (e^(x+h) - e^x)/h ");
error: 'h' undefined near line 1 column 6
error: evaluating argument list element number 2
error: invalid empty index list
octave:462> f2(x,h) = inline (" (e^(x+h) - e^(x-h)/(2*h) ");
parse error:

  syntax error



error: inline: unable to define function
octave:462> 
octave:462> 
octave:462> 
octave:462> f1 = inline (" (e^(x+h) - e^x)/h ");
octave:463> f2 = inline (" (e^(x+h) - e^(x-h)/(2*h) ");
parse error:

  syntax error



error: inline: unable to define function
octave:463> 
octave:463> f1 = inline("2x+y")
parse error:

  syntax error

>>> @(x, y) 2x+y
             ^

error: inline: unable to define function
octave:463> f1 = inline ("2x+y")
parse error:

  syntax error

>>> @(x, y) 2x+y
             ^

error: inline: unable to define function
octave:463> f1(x,y) = inline ("2x+y")
parse error:

  syntax error

>>> @(x, y) 2x+y
             ^

error: inline: unable to define function
octave:463> 
octave:463> 
octave:463> f1 = inline function
parse error:

  syntax error

>>> f1 = inline function
                       ^

octave:463> f1(x,h) = (" (e^(x+h) - e^x)/h ");
error: 'h' undefined near line 1 column 6
error: evaluating argument list element number 2
error: invalid empty index list
octave:463> f2 = inline function 
parse error:

  syntax error

>>> f2 = inline function 
                       ^

octave:463> f2(x,h) = (" (e^(x+h) - e^(x-h)/(2*h) ");
error: 'h' undefined near line 1 column 6
error: evaluating argument list element number 2
error: invalid empty index list
octave:463> 
octave:463> clear
octave:464> clc
octave:465> 
octave:465> 
octave:465> f1 = inline function
parse error:

  syntax error

>>> f1 = inline function
                       ^

octave:465> f1(x,h) = (" (e^(x+h) - e^x)/h ");
error: 'x' undefined near line 1 column 4
error: evaluating argument list element number 1
error: invalid empty index list
octave:465> f2 = inline function 
parse error:

  syntax error

>>> f2 = inline function 
                       ^

octave:465> f2(x,h) = (" (e^(x+h) - e^(x-h)/(2*h) ");
error: 'x' undefined near line 1 column 4
error: evaluating argument list element number 1
error: invalid empty index list
octave:465> 
octave:465> 
octave:465> 
octave:465> f1 = inline (" (e^(x+h) - e^x)/h ",x,h);
error: 'x' undefined near line 1 column 36
error: evaluating argument list element number 2
octave:465> f2 = inline (" (e^(x+h) - e^(x-h)/(2*h) ",x,h);
error: 'x' undefined near line 1 column 43
error: evaluating argument list element number 2
octave:465> 
octave:465> 
octave:465> 
octave:465> f1 = inline (" (e^(x+h) - e^x)/h ",2);
octave:466> f2 = inline (" (e^(x+h) - e^(x-h)/(2*h) ",2);
parse error:

  syntax error



error: inline: unable to define function
octave:466> 
octave:466> clear
octave:467> clc
octave:468> f1 = inline (" (e^(x+h) - e^x)/h ");
octave:469> f2 = inline (" (e^(x+h) - e^(x-h)/(2*h) ");
parse error:

  syntax error



error: inline: unable to define function
octave:469> clear
octave:470> clc
octave:471> 
octave:471> 
octave:471> f1 = inline (" (e^(x+h) - e^x)/h ");
octave:472> f2 = inline (" (e^(x+h) - e^(x-h))/(2*h) ");
octave:473> 
octave:473> e
ans =  2.7183
octave:474> h = [];
octave:475> for a=1:20
> h = [ h, 10^-a ];
> endfor
octave:476> h
h =

 Columns 1 through 5:

   1.0000e-01   1.0000e-02   1.0000e-03   1.0000e-04   1.0000e-05

 Columns 6 through 10:

   1.0000e-06   1.0000e-07   1.0000e-08   1.0000e-09   1.0000e-10

 Columns 11 through 15:

   1.0000e-11   1.0000e-12   1.0000e-13   1.0000e-14   1.0000e-15

 Columns 16 through 20:

   1.0000e-16   1.0000e-17   1.0000e-18   1.0000e-19   1.0000e-20

octave:477> app1 = f1(h)
error: 'x' undefined near line 1 column 14
error: called from:
error:    at line -1, column -1
octave:477> app1 = f1(1,h)
error: for x^A, A must be a square matrix. Use .^ for elementwise power.
error: called from:
error:    at line -1, column -1
octave:477> 
octave:477> 
octave:477> 
octave:477> f1 = inline (" (e.^(x+h) - e^x)./h ");
octave:478> f2 = inline (" (e.^(x+h) - e.^(x-h))./(2*h) ");
octave:479> 
octave:479> app1 = f1(1,h)
error: for x^A, A must be a square matrix. Use .^ for elementwise power.
error: called from:
error:    at line -1, column -1
octave:479> 
octave:479> 
octave:479> 
octave:479> f1(1,.h)
parse error:

  syntax error

>>> f1(1,.h)
         ^

octave:479> f1(1,h)
error: for x^A, A must be a square matrix. Use .^ for elementwise power.
error: called from:
error:    at line -1, column -1
octave:479> f1(h,x))
parse error:

  syntax error

>>> f1(h,x))
           ^

octave:479> f1(h,x)
error: 'x' undefined near line 1 column 6
error: evaluating argument list element number 2
octave:479> f1(h,1)
ans =

 Columns 1 through 7:

   2.85884   2.73192   2.71964   2.71842   2.71830   2.71828   2.71828

 Columns 8 through 14:

   2.71828   2.71828   2.71828   2.71827   2.71871   2.71783   2.70894

 Columns 15 through 20:

   3.10862   0.00000   0.00000   0.00000   0.00000   0.00000

octave:480> clear
octave:481> clc
octave:482> 
octave:482> 
octave:482> 
octave:482> f1 = inline (" (e.^(x+h) - e^x)./h ");
octave:483> f2 = inline (" (e.^(x+h) - e.^(x-h))./(2*h) ");
octave:484> 
octave:484> h = [];
octave:485> 
octave:485> for a=1:20
>   h = [ h, 10^(-a) ];
> endfor
octave:486> 
octave:486> 
octave:486> %NB gli argomenti sono in ordine alfabetico 
octave:486> 
octave:486> app1 = f1(h,1);
octave:487> app2 = f2(h,1);
octave:488> 
octave:488> 
octave:488> analitic1 = abs(app1 - exp(1));
octave:489> analitic2 = abs(app2 - exp(2));
octave:490> 
octave:490> 
octave:490> analitic1'
ans =

   1.4056e-01
   1.3637e-02
   1.3596e-03
   1.3592e-04
   1.3591e-05
   1.3590e-06
   1.3551e-07
   6.6028e-09
   2.1544e-07
   1.5477e-06
   1.1775e-05
   4.3231e-04
   4.5586e-04
   9.3376e-03
   3.9034e-01
   2.7183e+00
   2.7183e+00
   2.7183e+00
   2.7183e+00
   2.7183e+00

octave:491> analitic2'
ans =

   4.6662
   4.6707
   4.6708
   4.6708
   4.6708
   4.6708
   4.6708
   4.6708
   4.6708
   4.6708
   4.6708
   4.6706
   4.6712
   4.6801
   4.5025
   5.1686
   7.3891
   7.3891
   7.3891
   7.3891

octave:492> 
octave:492> 
octave:492> clear
octave:493> clc
octave:494> 
octave:494> 
octave:494> 
octave:494> f1 = inline (" (e.^(x+h) - e^x)./h ");
octave:495> f2 = inline (" (e.^(x+h) - e.^(x-h))./(2*h) ");
octave:496> 
octave:496> h = [];
octave:497> 
octave:497> for a=1:1:20
>   h = [ h, 10^(-a) ];
> endfor
octave:498> 
octave:498> 
octave:498> %NB gli argomenti sono in ordine alfabetico 
octave:498> 
octave:498> app1 = f1(h,1);
octave:499> app2 = f2(h,1);
octave:500> 
octave:500> 
octave:500> analitic1 = abs(app1 - exp(1));
octave:501> analitic2 = abs(app2 - exp(2));
octave:502> 
octave:502> tab = [ h'; analitic1'; analitic2' ];
octave:503> tab
tab =

   1.0000e-01
   1.0000e-02
   1.0000e-03
   1.0000e-04
   1.0000e-05
   1.0000e-06
   1.0000e-07
   1.0000e-08
   1.0000e-09
   1.0000e-10
   1.0000e-11
   1.0000e-12
   1.0000e-13
   1.0000e-14
   1.0000e-15
   1.0000e-16
   1.0000e-17
   1.0000e-18
   1.0000e-19
   1.0000e-20
   1.4056e-01
   1.3637e-02
   1.3596e-03
   1.3592e-04
   1.3591e-05
   1.3590e-06
   1.3551e-07
   6.6028e-09
   2.1544e-07
   1.5477e-06
   1.1775e-05
   4.3231e-04
   4.5586e-04
   9.3376e-03
   3.9034e-01
   2.7183e+00
   2.7183e+00
   2.7183e+00
   2.7183e+00
   2.7183e+00
   4.6662e+00
   4.6707e+00
   4.6708e+00
   4.6708e+00
   4.6708e+00
   4.6708e+00
   4.6708e+00
   4.6708e+00
   4.6708e+00
   4.6708e+00
   4.6708e+00
   4.6706e+00
   4.6712e+00
   4.6801e+00
   4.5025e+00
   5.1686e+00
   7.3891e+00
   7.3891e+00
   7.3891e+00
   7.3891e+00

octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> 
octave:504> clear
octave:505> clc
octave:506> 
octave:506> 
octave:506> 
octave:506> f1 = inline (" (e.^(x+h) - e^x)./h ");
octave:507> f2 = inline (" (e.^(x+h) - e.^(x-h))./(2*h) ");
octave:508> 
octave:508> h = [];
octave:509> 
octave:509> for a=1:1:20
>   h = [ h, 10^(-a) ];
> endfor
octave:510> 
octave:510> 
octave:510> %NB gli argomenti sono in ordine alfabetico 
octave:510> 
octave:510> app1 = f1(h,1);
octave:511> app2 = f2(h,1);
octave:512> 
octave:512> 
octave:512> analitic1 = abs(app1 - exp(1));
octave:513> analitic2 = abs(app2 - exp(2));
octave:514> 
octave:514> tab = [ h', analitic1', analitic2' ];
octave:515> tab
tab =

   1.0000e-01   1.4056e-01   4.6662e+00
   1.0000e-02   1.3637e-02   4.6707e+00
   1.0000e-03   1.3596e-03   4.6708e+00
   1.0000e-04   1.3592e-04   4.6708e+00
   1.0000e-05   1.3591e-05   4.6708e+00
   1.0000e-06   1.3590e-06   4.6708e+00
   1.0000e-07   1.3551e-07   4.6708e+00
   1.0000e-08   6.6028e-09   4.6708e+00
   1.0000e-09   2.1544e-07   4.6708e+00
   1.0000e-10   1.5477e-06   4.6708e+00
   1.0000e-11   1.1775e-05   4.6708e+00
   1.0000e-12   4.3231e-04   4.6706e+00
   1.0000e-13   4.5586e-04   4.6712e+00
   1.0000e-14   9.3376e-03   4.6801e+00
   1.0000e-15   3.9034e-01   4.5025e+00
   1.0000e-16   2.7183e+00   5.1686e+00
   1.0000e-17   2.7183e+00   7.3891e+00
   1.0000e-18   2.7183e+00   7.3891e+00
   1.0000e-19   2.7183e+00   7.3891e+00
   1.0000e-20   2.7183e+00   7.3891e+00

octave:516> clear
octave:517> clc
octave:518> 
octave:518> 
octave:518> 
octave:518> f1 = inline (" (e.^(x+h) - e^x)./h ");
octave:519> f2 = inline (" (e.^(x+h) - e.^(x-h))./(2*h) ");
octave:520> 
octave:520> h = [];
octave:521> 
octave:521> for a=1:1:20
>   h = [ h, 10^(-a) ];
> endfor
octave:522> 
octave:522> 
octave:522> %NB gli argomenti sono in ordine alfabetico 
octave:522> 
octave:522> app1 = f1(h,1);
octave:523> app2 = f2(h,1);
octave:524> 
octave:524> 
octave:524> analitic1 = (app1 - exp(1));
octave:525> analitic2 = (app2 - exp(2));
octave:526> 
octave:526> tab = [ h', analitic1', analitic2' ];
octave:527> tab
tab =

   1.0000e-01   1.4056e-01  -4.6662e+00
   1.0000e-02   1.3637e-02  -4.6707e+00
   1.0000e-03   1.3596e-03  -4.6708e+00
   1.0000e-04   1.3592e-04  -4.6708e+00
   1.0000e-05   1.3591e-05  -4.6708e+00
   1.0000e-06   1.3590e-06  -4.6708e+00
   1.0000e-07   1.3551e-07  -4.6708e+00
   1.0000e-08  -6.6028e-09  -4.6708e+00
   1.0000e-09   2.1544e-07  -4.6708e+00
   1.0000e-10   1.5477e-06  -4.6708e+00
   1.0000e-11  -1.1775e-05  -4.6708e+00
   1.0000e-12   4.3231e-04  -4.6706e+00
   1.0000e-13  -4.5586e-04  -4.6712e+00
   1.0000e-14  -9.3376e-03  -4.6801e+00
   1.0000e-15   3.9034e-01  -4.5025e+00
   1.0000e-16  -2.7183e+00  -5.1686e+00
   1.0000e-17  -2.7183e+00  -7.3891e+00
   1.0000e-18  -2.7183e+00  -7.3891e+00
   1.0000e-19  -2.7183e+00  -7.3891e+00
   1.0000e-20  -2.7183e+00  -7.3891e+00

octave:528> clear
octave:529> clc
octave:530> 
octave:530> 
octave:530> 
octave:530> f1 = inline (" (e.^(x+h) - e^x)./h ");
octave:531> f2 = inline (" (e.^(x+h) - e.^(x-h))./(2*h) ");
octave:532> 
octave:532> h = [];
octave:533> 
octave:533> for a=1:1:20
>   h = [ h, 10^(-a) ];
> endfor
octave:534> 
octave:534> 
octave:534> %NB gli argomenti sono in ordine alfabetico 
octave:534> 
octave:534> app1 = f1(h,1);
octave:535> app2 = f2(h,1);
octave:536> 
octave:536> 
octave:536> analitic1 = (app1 - exp(1));
octave:537> analitic2 = (app2 - exp(1));
octave:538> 
octave:538> tab = [ h', analitic1', analitic2' ];
octave:539> tab
tab =

   1.0000e-01   1.4056e-01   4.5327e-03
   1.0000e-02   1.3637e-02   4.5305e-05
   1.0000e-03   1.3596e-03   4.5305e-07
   1.0000e-04   1.3592e-04   4.5306e-09
   1.0000e-05   1.3591e-05   3.6382e-11
   1.0000e-06   1.3590e-06   5.8587e-11
   1.0000e-07   1.3551e-07   5.8587e-11
   1.0000e-08  -6.6028e-09  -6.6028e-09
   1.0000e-09   2.1544e-07  -6.6028e-09
   1.0000e-10   1.5477e-06   1.5477e-06
   1.0000e-11  -1.1775e-05  -1.1775e-05
   1.0000e-12   4.3231e-04   2.1027e-04
   1.0000e-13  -4.5586e-04  -4.5586e-04
   1.0000e-14  -9.3376e-03  -9.3376e-03
   1.0000e-15   3.9034e-01   1.6830e-01
   1.0000e-16  -2.7183e+00  -4.9784e-01
   1.0000e-17  -2.7183e+00  -2.7183e+00
   1.0000e-18  -2.7183e+00  -2.7183e+00
   1.0000e-19  -2.7183e+00  -2.7183e+00
   1.0000e-20  -2.7183e+00  -2.7183e+00

octave:540> diary off

octave:2> x = [ -3,5,8,0,1,5,-2,4]
x =

  -3   5   8   0   1   5  -2   4

octave:3> x(6) = 100
x =

    -3     5     8     0     1   100    -2     4

octave:4> x([1:3)] = [5,6,7]
parse error:

  syntax error

>>> x([1:3)] = [5,6,7]
          ^

octave:4> x([1:]) = [5,6,7]
parse error:

  syntax error

>>> x([1:]) = [5,6,7]
        ^

octave:4> x([1:3]) = [5,6,7]
x =

     5     6     7     0     1   100    -2     4

octave:5> 
octave:5> x(4) = []
x =

     5     6     7     1   100    -2     4

octave:6> x([4:7]) = []
x =

   5   6   7

octave:7> x = [ 1,2,3,x]
x =

   1   2   3   5   6   7

octave:8> x = [ x, 10, 11, 12]
x =

    1    2    3    5    6    7   10   11   12

octave:9> 
octave:9> 
octave:9> 
octave:9> %%%%
octave:9> 
octave:9> A = eye(4)
A =

Diagonal Matrix

   1   0   0   0
   0   1   0   0
   0   0   1   0
   0   0   0   1

octave:10> A(1,1)  = A(3,4)
A =

Diagonal Matrix

   0   0   0   0
   0   1   0   0
   0   0   1   0
   0   0   0   1

octave:11> h = ones(4)
h =

   1   1   1   1
   1   1   1   1
   1   1   1   1
   1   1   1   1

octave:12> h = ones(4,1)
h =

   1
   1
   1
   1

octave:13> A = [ h, A]
A =

   1   0   0   0   0
   1   0   1   0   0
   1   0   0   1   0
   1   0   0   0   1

octave:14> A = [ A, h ]
A =

   1   0   0   0   0   1
   1   0   1   0   0   1
   1   0   0   1   0   1
   1   0   0   0   1   1

octave:15> h = h'
h =

   1   1   1   1

octave:16> h ones(1,4)
parse error:

  syntax error

>>> h ones(1,4)
         ^

octave:16> h = ones(1,4)
h =

   1   1   1   1

octave:17> h = ones(1,6)
h =

   1   1   1   1   1   1

octave:18> A = [h;A]
A =

   1   1   1   1   1   1
   1   0   0   0   0   1
   1   0   1   0   0   1
   1   0   0   1   0   1
   1   0   0   0   1   1

octave:19> h = 4*ones(1,4)
h =

   4   4   4   4

octave:20> A(1:) = []
parse error:

  syntax error

>>> A(1:) = []
        ^

octave:20> A(1,:) = []
A =

   1   0   0   0   0   1
   1   0   1   0   0   1
   1   0   0   1   0   1
   1   0   0   0   1   1

octave:21> A = [h,A]
error: horizontal dimensions mismatch (1x4 vs 4x6)
octave:21> 
octave:21> 
octave:21> 
octave:21> 
octave:21> h = 4*ones(4,1)
h =

   4
   4
   4
   4

octave:22> A = [h,A]
A =

   4   1   0   0   0   0   1
   4   1   0   1   0   0   1
   4   1   0   0   1   0   1
   4   1   0   0   0   1   1

octave:23> A = [A,h]
A =

   4   1   0   0   0   0   1   4
   4   1   0   1   0   0   1   4
   4   1   0   0   1   0   1   4
   4   1   0   0   0   1   1   4

octave:24> A(3,:) = []
A =

   4   1   0   0   0   0   1   4
   4   1   0   1   0   0   1   4
   4   1   0   0   0   1   1   4

octave:25> A(:,3) = []
A =

   4   1   0   0   0   1   4
   4   1   1   0   0   1   4
   4   1   0   0   1   1   4

octave:26> 
octave:26> 
octave:26> 
octave:26> 
octave:26> 
octave:26> %*************************************************%
octave:26> 
octave:26> 
octave:26> 
octave:26> 
octave:26> x = [ 1: -0.1 : 0]
x =

   1.00000   0.90000   0.80000   0.70000   0.60000   0.50000   0.40000   0.30000   0.20000   0.10000   0.00000

octave:27> x([1 4 3])
ans =

   1.00000   0.70000   0.80000

octave:28> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
octave:28> % DA QUI INIZIA DOPO LA FINE DI QUELLO .2
octave:28> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
octave:28> 
octave:28> %4
octave:28> f1 = inline("x*(sqrt(x^2+1)-x)")
f1 = f(x) = x*(sqrt(x^2+1)-x)
octave:29> f2 = inline("x*sqrt(x^2+1)-x^2")
f2 = f(x) = x*sqrt(x^2+1)-x^2
octave:30> f3 = inline(" x/(sqrt(x^2+1)+x)")
f3 = f(x) =  x/(sqrt(x^2+1)+x)
octave:31> x = [1:10:1000];
octave:32> y1 = f(x);
error: 'f' undefined near line 1 column 6
octave:32> y1 = f1(x);
error: for A^b, A must be a square matrix. Use .^ for elementwise power.
error: evaluating argument list element number 1
error: called from:
error:    at line -1, column -1
octave:32> f1 = inline("x.*(sqrt(x.^2+1)-x)")
f1 = f(x) = x.*(sqrt(x.^2+1)-x)
octave:33> f2 = inline("x.*sqrt(x.^2+1)-x.^2")
f2 = f(x) = x.*sqrt(x.^2+1)-x.^2
octave:34> f3 = inline(" x./(sqrt(x.^2+1)+x)")
f3 = f(x) =  x./(sqrt(x.^2+1)+x)
octave:35> y1 = f1(x);
octave:36> y2 = f2(x);
octave:37> y3 = f3(x);
octave:38> y1(500)
error: A(I): index out of bounds; value 500 out of bound 100
octave:38> y1(499)
error: A(I): index out of bounds; value 499 out of bound 100
octave:38> size(y1)
ans =

     1   100

octave:39> y1(100)
ans =  0.50000
octave:40> y(100)
error: 'y' undefined near line 1 column 1
octave:40> y2(100)
ans =  0.50000
octave:41> y3(100)
ans =  0.50000
octave:42> 
octave:42> %% i vettori paiono piuttosto simili =) %
octave:42> y1
y1 =

 Columns 1 through 15:

   0.41421   0.49897   0.49972   0.49987   0.49993   0.49995   0.49997   0.49998   0.49998   0.49998   0.49999   0.49999   0.49999   0.49999   0.49999

 Columns 16 through 30:

   0.49999   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 31 through 45:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 46 through 60:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 61 through 75:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 76 through 90:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 91 through 100:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

octave:43> 
octave:43> 
octave:43> 
octave:43> 
octave:43> 
octave:43> 
octave:43> y2
y2 =

 Columns 1 through 15:

   0.41421   0.49897   0.49972   0.49987   0.49993   0.49995   0.49997   0.49998   0.49998   0.49998   0.49999   0.49999   0.49999   0.49999   0.49999

 Columns 16 through 30:

   0.49999   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 31 through 45:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 46 through 60:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 61 through 75:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 76 through 90:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 91 through 100:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

octave:44> 
octave:44> 
octave:44> y3
y3 =

 Columns 1 through 15:

   0.41421   0.49897   0.49972   0.49987   0.49993   0.49995   0.49997   0.49998   0.49998   0.49998   0.49999   0.49999   0.49999   0.49999   0.49999

 Columns 16 through 30:

   0.49999   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 31 through 45:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 46 through 60:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 61 through 75:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 76 through 90:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

 Columns 91 through 100:

   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000   0.50000

octave:45> 
octave:45> 
octave:45> 
octave:45> 
octave:45> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
octave:45> 
octave:45> 
octave:45> 
octave:45> d0 = -2*ones(1,9)
d0 =

  -2  -2  -2  -2  -2  -2  -2  -2  -2

octave:46> d1 = ones(1,8)
d1 =

   1   1   1   1   1   1   1   1

octave:47> d2 = ones(1,8)
d2 =

   1   1   1   1   1   1   1   1

octave:48> A = diag(d0)
A =

Diagonal Matrix

  -2   0   0   0   0   0   0   0   0
   0  -2   0   0   0   0   0   0   0
   0   0  -2   0   0   0   0   0   0
   0   0   0  -2   0   0   0   0   0
   0   0   0   0  -2   0   0   0   0
   0   0   0   0   0  -2   0   0   0
   0   0   0   0   0   0  -2   0   0
   0   0   0   0   0   0   0  -2   0
   0   0   0   0   0   0   0   0  -2

octave:49> A = diag(d0,1)
A =

   0  -2   0   0   0   0   0   0   0   0
   0   0  -2   0   0   0   0   0   0   0
   0   0   0  -2   0   0   0   0   0   0
   0   0   0   0  -2   0   0   0   0   0
   0   0   0   0   0  -2   0   0   0   0
   0   0   0   0   0   0  -2   0   0   0
   0   0   0   0   0   0   0  -2   0   0
   0   0   0   0   0   0   0   0  -2   0
   0   0   0   0   0   0   0   0   0  -2
   0   0   0   0   0   0   0   0   0   0

octave:50> A = diag(d0)
A =

Diagonal Matrix

  -2   0   0   0   0   0   0   0   0
   0  -2   0   0   0   0   0   0   0
   0   0  -2   0   0   0   0   0   0
   0   0   0  -2   0   0   0   0   0
   0   0   0   0  -2   0   0   0   0
   0   0   0   0   0  -2   0   0   0
   0   0   0   0   0   0  -2   0   0
   0   0   0   0   0   0   0  -2   0
   0   0   0   0   0   0   0   0  -2

octave:51> A = A + diag(d1,1)
A =

  -2   1   0   0   0   0   0   0   0
   0  -2   1   0   0   0   0   0   0
   0   0  -2   1   0   0   0   0   0
   0   0   0  -2   1   0   0   0   0
   0   0   0   0  -2   1   0   0   0
   0   0   0   0   0  -2   1   0   0
   0   0   0   0   0   0  -2   1   0
   0   0   0   0   0   0   0  -2   1
   0   0   0   0   0   0   0   0  -2

octave:52> A = A + diag(d1,-11)
error: operator +: nonconformant arguments (op1 is 9x9, op2 is 19x19)
octave:52> A = A + diag(d1,-1)
A =

  -2   1   0   0   0   0   0   0   0
   1  -2   1   0   0   0   0   0   0
   0   1  -2   1   0   0   0   0   0
   0   0   1  -2   1   0   0   0   0
   0   0   0   1  -2   1   0   0   0
   0   0   0   0   1  -2   1   0   0
   0   0   0   0   0   1  -2   1   0
   0   0   0   0   0   0   1  -2   1
   0   0   0   0   0   0   0   1  -2

octave:53> A(3,:) = A(6,:)
A =

  -2   1   0   0   0   0   0   0   0
   1  -2   1   0   0   0   0   0   0
   0   0   0   0   1  -2   1   0   0
   0   0   1  -2   1   0   0   0   0
   0   0   0   1  -2   1   0   0   0
   0   0   0   0   1  -2   1   0   0
   0   0   0   0   0   1  -2   1   0
   0   0   0   0   0   0   1  -2   1
   0   0   0   0   0   0   0   1  -2

octave:54> A = diag(d0)
A =

Diagonal Matrix

  -2   0   0   0   0   0   0   0   0
   0  -2   0   0   0   0   0   0   0
   0   0  -2   0   0   0   0   0   0
   0   0   0  -2   0   0   0   0   0
   0   0   0   0  -2   0   0   0   0
   0   0   0   0   0  -2   0   0   0
   0   0   0   0   0   0  -2   0   0
   0   0   0   0   0   0   0  -2   0
   0   0   0   0   0   0   0   0  -2

octave:55> A = A + diag(d1,1)
A =

  -2   1   0   0   0   0   0   0   0
   0  -2   1   0   0   0   0   0   0
   0   0  -2   1   0   0   0   0   0
   0   0   0  -2   1   0   0   0   0
   0   0   0   0  -2   1   0   0   0
   0   0   0   0   0  -2   1   0   0
   0   0   0   0   0   0  -2   1   0
   0   0   0   0   0   0   0  -2   1
   0   0   0   0   0   0   0   0  -2

octave:56> A = A + diag(d1,-1)
A =

  -2   1   0   0   0   0   0   0   0
   1  -2   1   0   0   0   0   0   0
   0   1  -2   1   0   0   0   0   0
   0   0   1  -2   1   0   0   0   0
   0   0   0   1  -2   1   0   0   0
   0   0   0   0   1  -2   1   0   0
   0   0   0   0   0   1  -2   1   0
   0   0   0   0   0   0   1  -2   1
   0   0   0   0   0   0   0   1  -2

octave:57> x = A([3,6],:) = A([6,3],:)
x =

   0   0   0   0   1  -2   1   0   0
   0   1  -2   1   0   0   0   0   0

octave:58> A
A =

  -2   1   0   0   0   0   0   0   0
   1  -2   1   0   0   0   0   0   0
   0   0   0   0   1  -2   1   0   0
   0   0   1  -2   1   0   0   0   0
   0   0   0   1  -2   1   0   0   0
   0   1  -2   1   0   0   0   0   0
   0   0   0   0   0   1  -2   1   0
   0   0   0   0   0   0   1  -2   1
   0   0   0   0   0   0   0   1  -2

octave:59> A(:,[1,4]) = A(:,[4,1])
A =

   0   1   0  -2   0   0   0   0   0
   0  -2   1   1   0   0   0   0   0
   0   0   0   0   1  -2   1   0   0
  -2   0   1   0   1   0   0   0   0
   1   0   0   0  -2   1   0   0   0
   1   1  -2   0   0   0   0   0   0
   0   0   0   0   0   1  -2   1   0
   0   0   0   0   0   0   1  -2   1
   0   0   0   0   0   0   0   1  -2

octave:60> 
octave:60> 
octave:60> 
octave:60> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
octave:60> 
octave:60> 
octave:60> x = [1:12]
x =

    1    2    3    4    5    6    7    8    9   10   11   12

octave:61> A = [x([1:4]);x([5:8]);x([9:12])]
A =

    1    2    3    4
    5    6    7    8
    9   10   11   12

octave:62> size(A)
ans =

   3   4

octave:63> B = A.*A
B =

     1     4     9    16
    25    36    49    64
    81   100   121   144

octave:64> B = A*A
error: operator *: nonconformant arguments (op1 is 3x4, op2 is 3x4)
octave:64> B = A'*A
B =

   107   122   137   152
   122   140   158   176
   137   158   179   200
   152   176   200   224

octave:65> A(1:2,:)
ans =

   1   2   3   4
   5   6   7   8

octave:66> A(:,[2,4])
ans =

    2    4
    6    8
   10   12

octave:67> A([2 3 3])
ans =

   5   9   9

octave:68> A
A =

    1    2    3    4
    5    6    7    8
    9   10   11   12

octave:69> A[1:1:12]
parse error:

  syntax error

>>> A[1:1:12]
     ^

octave:69> A([1:1:12])
ans =

    1    5    9    2    6   10    3    7   11    4    8   12

octave:70> % Octave ordina per colonne
octave:70> 
octave:70> 
octave:70> a = ones(1,8)
a =

   1   1   1   1   1   1   1   1

octave:71> for b = 1 to 8
parse error:

  syntax error

>>> for b = 1 to 8
                 ^

octave:71> for b in 1:8
parse error:

  syntax error

>>> for b in 1:8
           ^

octave:71> for b= 1:8
> 
> 
> endfor
octave:72> A = []
A = [](0x0)
octave:73> for b= 1:8
> A(i,:) = i*a;
> endfor
error: attempted to use a complex scalar as an index
       (forgot to initialize i or j?)
error: assignment failed, or no method for 'matrix = complex matrix'
octave:73> A
A = [](0x0)
octave:74> for b= 1:8
> A(b,:) = b*a;
> endfor
octave:75> A
A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3
   4   4   4   4   4   4   4   4
   5   5   5   5   5   5   5   5
   6   6   6   6   6   6   6   6
   7   7   7   7   7   7   7   7
   8   8   8   8   8   8   8   8

octave:76> S = triup(A)
error: 'triup' undefined near line 1 column 5
octave:76> S = triu(A)
S =

   1   1   1   1   1   1   1   1
   0   2   2   2   2   2   2   2
   0   0   3   3   3   3   3   3
   0   0   0   4   4   4   4   4
   0   0   0   0   5   5   5   5
   0   0   0   0   0   6   6   6
   0   0   0   0   0   0   7   7
   0   0   0   0   0   0   0   8

octave:77> L = tris(A)
error: 'tris' undefined near line 1 column 5
octave:77> L = tril(A)
L =

   1   0   0   0   0   0   0   0
   2   2   0   0   0   0   0   0
   3   3   3   0   0   0   0   0
   4   4   4   4   0   0   0   0
   5   5   5   5   5   0   0   0
   6   6   6   6   6   6   0   0
   7   7   7   7   7   7   7   0
   8   8   8   8   8   8   8   8

octave:78> diag(S)
ans =

   1
   2
   3
   4
   5
   6
   7
   8

octave:79> zeros(3)
ans =

   0   0   0
   0   0   0
   0   0   0

octave:80> zeros(3,1)
ans =

   0
   0
   0

octave:81> diag(S) = zeros(8,1)
error: subscript indices must be either positive integers less than 2^31 or logicals
octave:81> diag(S) = zeros(1,6)
error: subscript indices must be either positive integers less than 2^31 or logicals
octave:81> diary off
octave:2> ls
Documenti  esercizio1  esercizio2.1	 hw	   java32   Musica	      PlayOnLinux's virtual drives  Scaricati  Video
Dropbox    esercizio2  examples.desktop  Immagini  Modelli  octave-workspace  Pubblici			    Scrivania  VirtualBox VMs
octave:3> list
error: 'list' undefined near line 1 column 1
octave:3> A
error: 'A' undefined near line 1 column 1
octave:3> diary off
octave:5> a = ones(1,8)
a =

   1   1   1   1   1   1   1   1

octave:6> for b=1:8
> endfor
octave:7> A = [];
octave:8> for b=1:8
> A = [b*a;A]
> endfor
A =

   1   1   1   1   1   1   1   1

A =

   2   2   2   2   2   2   2   2
   1   1   1   1   1   1   1   1

A =

   3   3   3   3   3   3   3   3
   2   2   2   2   2   2   2   2
   1   1   1   1   1   1   1   1

A =

   4   4   4   4   4   4   4   4
   3   3   3   3   3   3   3   3
   2   2   2   2   2   2   2   2
   1   1   1   1   1   1   1   1

A =

   5   5   5   5   5   5   5   5
   4   4   4   4   4   4   4   4
   3   3   3   3   3   3   3   3
   2   2   2   2   2   2   2   2
   1   1   1   1   1   1   1   1

A =

   6   6   6   6   6   6   6   6
   5   5   5   5   5   5   5   5
   4   4   4   4   4   4   4   4
   3   3   3   3   3   3   3   3
   2   2   2   2   2   2   2   2
   1   1   1   1   1   1   1   1

A =

   7   7   7   7   7   7   7   7
   6   6   6   6   6   6   6   6
   5   5   5   5   5   5   5   5
   4   4   4   4   4   4   4   4
   3   3   3   3   3   3   3   3
   2   2   2   2   2   2   2   2
   1   1   1   1   1   1   1   1

A =

   8   8   8   8   8   8   8   8
   7   7   7   7   7   7   7   7
   6   6   6   6   6   6   6   6
   5   5   5   5   5   5   5   5
   4   4   4   4   4   4   4   4
   3   3   3   3   3   3   3   3
   2   2   2   2   2   2   2   2
   1   1   1   1   1   1   1   1

octave:9> 
octave:9> A
A =

   8   8   8   8   8   8   8   8
   7   7   7   7   7   7   7   7
   6   6   6   6   6   6   6   6
   5   5   5   5   5   5   5   5
   4   4   4   4   4   4   4   4
   3   3   3   3   3   3   3   3
   2   2   2   2   2   2   2   2
   1   1   1   1   1   1   1   1

octave:10> for b=1:8
> for b=1:8
> endfor
> endfor
octave:11> A = []
A = [](0x0)
octave:12> for b=1:8
> A = [A,b*a]
> endfor
A =

   1   1   1   1   1   1   1   1

A =

   1   1   1   1   1   1   1   1   2   2   2   2   2   2   2   2

A =

   1   1   1   1   1   1   1   1   2   2   2   2   2   2   2   2   3   3   3   3   3   3   3   3

A =

   1   1   1   1   1   1   1   1   2   2   2   2   2   2   2   2   3   3   3   3   3   3   3   3   4   4   4   4   4   4   4   4

A =

 Columns 1 through 37:

   1   1   1   1   1   1   1   1   2   2   2   2   2   2   2   2   3   3   3   3   3   3   3   3   4   4   4   4   4   4   4   4   5   5   5   5   5

 Columns 38 through 40:

   5   5   5

A =

 Columns 1 through 37:

   1   1   1   1   1   1   1   1   2   2   2   2   2   2   2   2   3   3   3   3   3   3   3   3   4   4   4   4   4   4   4   4   5   5   5   5   5

 Columns 38 through 48:

   5   5   5   6   6   6   6   6   6   6   6

A =

 Columns 1 through 37:

   1   1   1   1   1   1   1   1   2   2   2   2   2   2   2   2   3   3   3   3   3   3   3   3   4   4   4   4   4   4   4   4   5   5   5   5   5

 Columns 38 through 56:

   5   5   5   6   6   6   6   6   6   6   6   7   7   7   7   7   7   7   7

A =

 Columns 1 through 37:

   1   1   1   1   1   1   1   1   2   2   2   2   2   2   2   2   3   3   3   3   3   3   3   3   4   4   4   4   4   4   4   4   5   5   5   5   5

 Columns 38 through 64:

   5   5   5   6   6   6   6   6   6   6   6   7   7   7   7   7   7   7   7   8   8   8   8   8   8   8   8

octave:13> 
octave:13> A
A =

 Columns 1 through 37:

   1   1   1   1   1   1   1   1   2   2   2   2   2   2   2   2   3   3   3   3   3   3   3   3   4   4   4   4   4   4   4   4   5   5   5   5   5

 Columns 38 through 64:

   5   5   5   6   6   6   6   6   6   6   6   7   7   7   7   7   7   7   7   8   8   8   8   8   8   8   8

octave:14> for b=1:8
> endfor
octave:15> A = []
A = [](0x0)
octave:16> for b=1:8
> A = [A;b*a]
> endfor
A =

   1   1   1   1   1   1   1   1

A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2

A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3

A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3
   4   4   4   4   4   4   4   4

A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3
   4   4   4   4   4   4   4   4
   5   5   5   5   5   5   5   5

A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3
   4   4   4   4   4   4   4   4
   5   5   5   5   5   5   5   5
   6   6   6   6   6   6   6   6

A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3
   4   4   4   4   4   4   4   4
   5   5   5   5   5   5   5   5
   6   6   6   6   6   6   6   6
   7   7   7   7   7   7   7   7

A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3
   4   4   4   4   4   4   4   4
   5   5   5   5   5   5   5   5
   6   6   6   6   6   6   6   6
   7   7   7   7   7   7   7   7
   8   8   8   8   8   8   8   8

octave:17> A
A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3
   4   4   4   4   4   4   4   4
   5   5   5   5   5   5   5   5
   6   6   6   6   6   6   6   6
   7   7   7   7   7   7   7   7
   8   8   8   8   8   8   8   8

octave:18> 
octave:18> 
octave:18> 
octave:18> S = triu(A)
S =

   1   1   1   1   1   1   1   1
   0   2   2   2   2   2   2   2
   0   0   3   3   3   3   3   3
   0   0   0   4   4   4   4   4
   0   0   0   0   5   5   5   5
   0   0   0   0   0   6   6   6
   0   0   0   0   0   0   7   7
   0   0   0   0   0   0   0   8

octave:19> L = tril(A)
L =

   1   0   0   0   0   0   0   0
   2   2   0   0   0   0   0   0
   3   3   3   0   0   0   0   0
   4   4   4   4   0   0   0   0
   5   5   5   5   5   0   0   0
   6   6   6   6   6   6   0   0
   7   7   7   7   7   7   7   0
   8   8   8   8   8   8   8   8

octave:20> a = diag(A)
a =

   1
   2
   3
   4
   5
   6
   7
   8

octave:21> B = diag(a)
B =

Diagonal Matrix

   1   0   0   0   0   0   0   0
   0   2   0   0   0   0   0   0
   0   0   3   0   0   0   0   0
   0   0   0   4   0   0   0   0
   0   0   0   0   5   0   0   0
   0   0   0   0   0   6   0   0
   0   0   0   0   0   0   7   0
   0   0   0   0   0   0   0   8

octave:22> S = S-B
S =

   0   1   1   1   1   1   1   1
   0   0   2   2   2   2   2   2
   0   0   0   3   3   3   3   3
   0   0   0   0   4   4   4   4
   0   0   0   0   0   5   5   5
   0   0   0   0   0   0   6   6
   0   0   0   0   0   0   0   7
   0   0   0   0   0   0   0   0

octave:23> diag(L) = 1
error: subscript indices must be either positive integers less than 2^31 or logicals
octave:23> L
L =

   1   0   0   0   0   0   0   0
   2   2   0   0   0   0   0   0
   3   3   3   0   0   0   0   0
   4   4   4   4   0   0   0   0
   5   5   5   5   5   0   0   0
   6   6   6   6   6   6   0   0
   7   7   7   7   7   7   7   0
   8   8   8   8   8   8   8   8

octave:24> A(i,i) = 1
error: attempted to use a complex scalar as an index
       (forgot to initialize i or j?)
error: assignment failed, or no method for 'matrix = scalar'
octave:24> for a =1:8
> A(a,a) = 1;
> endfor
octave:25> A
A =

   1   1   1   1   1   1   1   1
   2   1   2   2   2   2   2   2
   3   3   1   3   3   3   3   3
   4   4   4   1   4   4   4   4
   5   5   5   5   1   5   5   5
   6   6   6   6   6   1   6   6
   7   7   7   7   7   7   1   7
   8   8   8   8   8   8   8   1

octave:26> for a =1:8
> L(a,a) = 1;
> endfor
octave:27> L
L =

   1   0   0   0   0   0   0   0
   2   1   0   0   0   0   0   0
   3   3   1   0   0   0   0   0
   4   4   4   1   0   0   0   0
   5   5   5   5   1   0   0   0
   6   6   6   6   6   1   0   0
   7   7   7   7   7   7   1   0
   8   8   8   8   8   8   8   1

octave:28> for b=1:8
> A(b,b) = A(b,b+1)
> endfor
A =

   1   1   1   1   1   1   1   1
   2   1   2   2   2   2   2   2
   3   3   1   3   3   3   3   3
   4   4   4   1   4   4   4   4
   5   5   5   5   1   5   5   5
   6   6   6   6   6   1   6   6
   7   7   7   7   7   7   1   7
   8   8   8   8   8   8   8   1

A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   1   3   3   3   3   3
   4   4   4   1   4   4   4   4
   5   5   5   5   1   5   5   5
   6   6   6   6   6   1   6   6
   7   7   7   7   7   7   1   7
   8   8   8   8   8   8   8   1

A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3
   4   4   4   1   4   4   4   4
   5   5   5   5   1   5   5   5
   6   6   6   6   6   1   6   6
   7   7   7   7   7   7   1   7
   8   8   8   8   8   8   8   1

A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3
   4   4   4   4   4   4   4   4
   5   5   5   5   1   5   5   5
   6   6   6   6   6   1   6   6
   7   7   7   7   7   7   1   7
   8   8   8   8   8   8   8   1

A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3
   4   4   4   4   4   4   4   4
   5   5   5   5   5   5   5   5
   6   6   6   6   6   1   6   6
   7   7   7   7   7   7   1   7
   8   8   8   8   8   8   8   1

A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3
   4   4   4   4   4   4   4   4
   5   5   5   5   5   5   5   5
   6   6   6   6   6   6   6   6
   7   7   7   7   7   7   1   7
   8   8   8   8   8   8   8   1

A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3
   4   4   4   4   4   4   4   4
   5   5   5   5   5   5   5   5
   6   6   6   6   6   6   6   6
   7   7   7   7   7   7   7   7
   8   8   8   8   8   8   8   1

error: A(I,J): column index out of bounds; value 9 out of bound 8
octave:28> A
A =

   1   1   1   1   1   1   1   1
   2   2   2   2   2   2   2   2
   3   3   3   3   3   3   3   3
   4   4   4   4   4   4   4   4
   5   5   5   5   5   5   5   5
   6   6   6   6   6   6   6   6
   7   7   7   7   7   7   7   7
   8   8   8   8   8   8   8   1

octave:29> d0 = diag(A)
d0 =

   1
   2
   3
   4
   5
   6
   7
   1

octave:30> d1 = diag(A,1)
d1 =

   1
   2
   3
   4
   5
   6
   7

octave:31> d2 = diag(A,-1)
d2 =

   2
   3
   4
   5
   6
   7
   8

octave:32> B1 = diag(d0)
B1 =

Diagonal Matrix

   1   0   0   0   0   0   0   0
   0   2   0   0   0   0   0   0
   0   0   3   0   0   0   0   0
   0   0   0   4   0   0   0   0
   0   0   0   0   5   0   0   0
   0   0   0   0   0   6   0   0
   0   0   0   0   0   0   7   0
   0   0   0   0   0   0   0   1

octave:33> B2 = diag(do,0,d1,1)
parse error:

  syntax error

>>> B2 = diag(do,0,d1,1)
               ^

octave:33> B2 = diag(d0,0,d1,1)
error: Invalid call to diag.  Correct usage is:

 -- Built-in Function: M = diag (V)
 -- Built-in Function: M = diag (V, K)
 -- Built-in Function: M = diag (V, M, N)
 -- Built-in Function: V = diag (M)
 -- Built-in Function: V = diag (M, K)


Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
octave:33> B2 = diag(d0,0)
B2 =

Diagonal Matrix

   1   0   0   0   0   0   0   0
   0   2   0   0   0   0   0   0
   0   0   3   0   0   0   0   0
   0   0   0   4   0   0   0   0
   0   0   0   0   5   0   0   0
   0   0   0   0   0   6   0   0
   0   0   0   0   0   0   7   0
   0   0   0   0   0   0   0   1

octave:34> B2 = B2 + diag(d1,1)
B2 =

   1   1   0   0   0   0   0   0
   0   2   2   0   0   0   0   0
   0   0   3   3   0   0   0   0
   0   0   0   4   4   0   0   0
   0   0   0   0   5   5   0   0
   0   0   0   0   0   6   6   0
   0   0   0   0   0   0   7   7
   0   0   0   0   0   0   0   1

octave:35> B3 = B1
B3 =

Diagonal Matrix

   1   0   0   0   0   0   0   0
   0   2   0   0   0   0   0   0
   0   0   3   0   0   0   0   0
   0   0   0   4   0   0   0   0
   0   0   0   0   5   0   0   0
   0   0   0   0   0   6   0   0
   0   0   0   0   0   0   7   0
   0   0   0   0   0   0   0   1

octave:36> B3 = B3 + diag(d2,-1)
B3 =

   1   0   0   0   0   0   0   0
   2   2   0   0   0   0   0   0
   0   3   3   0   0   0   0   0
   0   0   4   4   0   0   0   0
   0   0   0   5   5   0   0   0
   0   0   0   0   6   6   0   0
   0   0   0   0   0   7   7   0
   0   0   0   0   0   0   8   1

octave:37> [ x1, x2, x3, x4 ] = roots(alpha)
warning: the 'alpha' function is not yet implemented in Octave

Please read <http://www.octave.org/missing.html> to learn how you can
contribute missing functionality.


error: 'alpha' undefined near line 1 column 22
error: evaluating argument list element number 1
octave:37> function [ x1, x2, x3, x4 ] = roots(alpha)
> t1 = ( (-1+10^alpha)/10 + sqrt((( (1+10^alpha)/10)^2 -4 )/2 ) )
> t2 = ( (-1+10^alpha)/10 - sqrt((( (1+10^alpha)/10)^2 -4 )/2 ) )
> x1 = sqrt(t1);
> x2 = sqrt(t2);
> x3 = -sqrt(t1);
> x4 = -sqrt(t2);
> endfunction
octave:38> A = []
A = [](0x0)
octave:39> for b=1:10
> A(i,1) = 1;
> A(i,2) = (1+10^b)/10;
> A(i,3) = 1;
> endfor
error: attempted to use a complex scalar as an index
       (forgot to initialize i or j?)
error: assignment failed, or no method for 'matrix = scalar'
octave:39> for b=1:10
> A(b,1) = 1;
> A(b,2) = (1+10^b)/10;
> A(b,3) = 1;
> endfor
octave:40> A
A =

   1.0000e+00   1.1000e+00   1.0000e+00
   1.0000e+00   1.0100e+01   1.0000e+00
   1.0000e+00   1.0010e+02   1.0000e+00
   1.0000e+00   1.0001e+03   1.0000e+00
   1.0000e+00   1.0000e+04   1.0000e+00
   1.0000e+00   1.0000e+05   1.0000e+00
   1.0000e+00   1.0000e+06   1.0000e+00
   1.0000e+00   1.0000e+07   1.0000e+00
   1.0000e+00   1.0000e+08   1.0000e+00
   1.0000e+00   1.0000e+09   1.0000e+00

octave:41> o = zeros(10,1)
o =

   0
   0
   0
   0
   0
   0
   0
   0
   0
   0

octave:42> for b=1:10
> A(b,1) = 1;
> A(b,2) = 0;
> A(b,3) = (1+10^b)/10;
> A(b,4) = 0;
> A(b,5) = 1;
> endfor
octave:43> A
A =

   1.0000e+00   0.0000e+00   1.1000e+00   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0100e+01   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0010e+02   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0001e+03   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+04   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+05   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+06   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+07   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+08   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+09   0.0000e+00   1.0000e+00

octave:44> x_roots = []
x_roots = [](0x0)
octave:45> for b=1:10
> endfo
> r
> endfor
error: 'endfo' undefined near line 2 column 1
octave:45> roots(A(1,:))
error: for x^A, A must be a square matrix. Use .^ for elementwise power.
error: called from:
error:   roots at line 2, column 4
octave:45> root(A(1,:))
error: 'root' undefined near line 1 column 1
octave:45> root
error: 'root' undefined near line 1 column 1
octave:45> roots
warning: the 'alpha' function is not yet implemented in Octave

Please read <http://www.octave.org/missing.html> to learn how you can
contribute missing functionality.


error: 'alpha' undefined near line 2 column 15
error: called from:
error:   roots at line 2, column 4
octave:45> 
octave:45> 
octave:45> clear
octave:46> 
octave:46> 
octave:46> 
octave:4> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
octave:4> %%%% Esercizio 8 strapeso %%%%%%%%%%%%%
octave:4> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
octave:4> 
octave:4> 
octave:4> X = random(10)
warning: the 'random' function belongs to the statistics package from Octave
Forge which seems to not be installed in your system.

Please read <http://www.octave.org/missing.html> to learn how you can
contribute missing functionality.


error: 'random' undefined near line 1 column 5
octave:4> X = rand(10)
X =

   0.248270   0.917513   0.583181   0.423461   0.919177   0.254263   0.224436   0.253303   0.849770   0.651156
   0.412347   0.040965   0.661913   0.162898   0.672964   0.793700   0.692375   0.602628   0.241427   0.820838
   0.388765   0.062153   0.145994   0.753694   0.583659   0.012822   0.160206   0.507304   0.147989   0.686462
   0.593271   0.444979   0.192430   0.645186   0.363581   0.306078   0.294608   0.709273   0.492993   0.272865
   0.987373   0.991600   0.032274   0.527489   0.032471   0.457573   0.342723   0.836502   0.356213   0.381592
   0.965168   0.844836   0.527052   0.693299   0.702486   0.276277   0.349679   0.044581   0.636040   0.736248
   0.874992   0.570041   0.889534   0.549381   0.488105   0.193270   0.799846   0.809073   0.474519   0.225768
   0.245002   0.922443   0.129651   0.257084   0.918158   0.078113   0.464022   0.186134   0.583931   0.161437
   0.965027   0.766045   0.436274   0.386351   0.418218   0.086891   0.487725   0.250191   0.809419   0.145232
   0.158631   0.039480   0.221500   0.255912   0.215420   0.163665   0.483576   0.833354   0.276899   0.219331

octave:5> X = X(:,1)
X =

   0.24827
   0.41235
   0.38877
   0.59327
   0.98737
   0.96517
   0.87499
   0.24500
   0.96503
   0.15863

octave:6> X ? X'
error: invalid character '?' (ASCII 63) near line 1, column 4
parse error:

  syntax error

>>> X ? X'
      ^

octave:6> X = X'
X =

   0.24827   0.41235   0.38877   0.59327   0.98737   0.96517   0.87499   0.24500   0.96503   0.15863

octave:7> X = sort(X)
X =

   0.15863   0.24500   0.24827   0.38877   0.41235   0.59327   0.87499   0.96503   0.96517   0.98737

octave:8> a1=3
a1 =  3
octave:9> a2=1
a2 =  1
octave:10> a3=123
a3 =  123
octave:11> a4=-1
a4 = -1
octave:12> [x1,x2,x3,x4]=sort([a1,a2,a3,a4])
x1 =

    -1     1     3   123

x2 =

   4   2   1   3

error: element number 3 undefined in return list
octave:12> 
octave:12> 
octave:12> 
octave:12> 
octave:12> 
octave:12> 
octave:12> load my_roots.m 
octave:13> source
error: Invalid call to source.  Correct usage is:

 -- Built-in Function: source (FILE)


Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
octave:13> source(my_roots.m)
warning: the 'alpha' function is not yet implemented in Octave

Please read <http://www.octave.org/missing.html> to learn how you can
contribute missing functionality.


error: 'alpha' undefined near line 3 column 16
error: called from:
error:   /home/lpatta/my_roots.m at line 3, column 5
error: evaluating argument list element number 1
octave:13> display(my_roots.m )
warning: the 'alpha' function is not yet implemented in Octave

Please read <http://www.octave.org/missing.html> to learn how you can
contribute missing functionality.


error: 'alpha' undefined near line 3 column 16
error: called from:
error:   /home/lpatta/my_roots.m at line 3, column 5
error: evaluating argument list element number 1
octave:13> man display 
error: 'man' undefined near line 1 column 1
octave:13> help display 
'display' is a function from the file /usr/share/octave/3.8.1/m/general/display.m

 -- Function File: display (A)
     Display the contents of an object.  If A is an object of the class
     "myclass", then 'display' is called in a case like

          myclass (...)

     where Octave is required to display the contents of a variable of
     the type "myclass".

     See also: class, subsref, subsasgn.


Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
octave:14> disp
error: Invalid call to disp.  Correct usage is:

 -- Built-in Function: disp (X)


Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
octave:14> disp(my_roots.m )
warning: the 'alpha' function is not yet implemented in Octave

Please read <http://www.octave.org/missing.html> to learn how you can
contribute missing functionality.


error: 'alpha' undefined near line 3 column 16
error: called from:
error:   /home/lpatta/my_roots.m at line 3, column 5
error: evaluating argument list element number 1
octave:14> disp(my_roots.m)
warning: the 'alpha' function is not yet implemented in Octave

Please read <http://www.octave.org/missing.html> to learn how you can
contribute missing functionality.


error: 'alpha' undefined near line 3 column 16
error: called from:
error:   /home/lpatta/my_roots.m at line 3, column 5
error: evaluating argument list element number 1
octave:14> 
octave:14> 
octave:14> 
octave:14> for alpha = 1:10
> endfunction
parse error:

>>> endfunction
              ^

error: 'for' command matched by 'endfunction' near line 2 column 1
octave:14> A = []
A = [](0x0)
octave:15> for alpha = 1:10
> A(alpha,1) = 1;
> A(alpha,2) = 0;
> A(alpha,3) = (1+10^(2*alpha))/10^alpha;
> A(alpha,4) = o;
> A(alpha,5) = 1;
> endfunction
parse error:

>>> endfunction
              ^

error: 'for' command matched by 'endfunction' near line 7 column 1
octave:15> 	load my_roots.m
octave:16> 
octave:16> 
octave:16> function [x1,x2,x3,x4] = my_roots(alpha)
>   
>   b = (1+10^(2*alpha))/10^alpha;
>   t1 = (b + sqrt(b^2-4))/2;
>   t2 = (b - sqrt(b^2-4))/2;
> 
>   x1 = -sqrt(t1);
>   x2 = -sqrt(t2);
>   x3 =  sqrt(t1);
>   x4 =  sqrt(t2);
> 
> endfunction
octave:17> 
octave:17> 
octave:17> A = [];
octave:18> 
octave:18> for alpha = 1:10
>  A(alpha,1) = 1;
>  A(alpha,2) = 0;
>  A(alpha,3) = (1+10^(2*alpha))/10^alpha;
>  A(alpha,4) = 0;
>  A(alpha,5) = 1;
> endfunction
parse error:

>>> endfunction
              ^

error: 'for' command matched by 'endfunction' near line 7 column 1
octave:18> 
octave:18> my_solutions = [];
octave:19> octv_solutions = [];
octave:20> 
octave:20> for alpha = 1:10
>   my_solutions = [ my_solutions ; my_roots(alpha) ];
>   oc_solutions = [ oc_solutions ; roots(A(alpha, :))  ]
> endfunction
parse error:

>>> endfunction
              ^

error: 'for' command matched by 'endfunction' near line 4 column 1
octave:20> 
octave:20> 
octave:20> for a = 1:10
>   my_solutions(a,:) = sort(my_solutions(a,:));
>   oc_solutions(a,:) = sort(oc_solutions(a,:));
> endfunction
parse error:

>>> endfunction
              ^

error: 'for' command matched by 'endfunction' near line 4 column 1
octave:20> 
octave:20> % errori relativi = my_solutions./oc_solutions
octave:20> error_relativ = [];
octave:21> 
octave:21> for a = 1:10
>   error_relativ = [ error_relativ ; my_solutions./oc_solutions ];
> endfuntcion
> 
> 
> error_relativ
> 
> 
> 
> 
> 
> 
> 
> 
> 
> load my_roots.m
> 
> 
> function [x1,x2,x3,x4] = my_roots(alpha)
>   
>   b = (1+10^(2*alpha))/10^alpha;
>   t1 = (b + sqrt(b^2-4))/2;
>   t2 = (b - sqrt(b^2-4))/2;
> 
>   x1 = -sqrt(t1);
>   x2 = -sqrt(t2);
>   x3 =  sqrt(t1);
>   x4 =  sqrt(t2);
> 
> endfunction
> 
> 
> A = [];
> 
> for alpha = 1:10
>  A(alpha,1) = 1;
>  A(alpha,2) = 0;
>  A(alpha,3) = (1+10^(2*alpha))/10^alpha;
>  A(alpha,4) = 0;
>  A(alpha,5) = 1;
> endfor
> 
> my_solutions = [];
> octv_solutions = [];
> 
> for alpha = 1:10
>   my_solutions = [ my_solutions ; my_roots(alpha) ];
>   oc_solutions = [ oc_solutions ; roots(A(alpha, :))  ]
> endfor
> 
> 
> for a = 1:10
>   my_solutions(a,:) = sort(my_solutions(a,:));
>   oc_solutions(a,:) = sort(oc_solutions(a,:));
> endfor
> 
> % errori relativi = my_solutions./oc_solutions
> error_relativ = [];
> 
> for a = 1:10
>   error_relativ = [ error_relativ ; my_solutions./oc_solutions ];
> endfuntcion
> 
> 
> error_relativ
> 
> 
> 
> 
> 
> 
> 
> clear
> clc
> 
> 
> ;
> end
> 
> end
error: 'oc_solutions' undefined near line 2 column 48
octave:21> 
octave:21> 
octave:21> 
octave:21> 
octave:21> function [x1,x2,x3,x4] = my_roots(alpha)
>   
>   b = (1+10^(2*alpha))/10^alpha;
>   t1 = (b + sqrt(b^2-4))/2;
>   t2 = (b - sqrt(b^2-4))/2;
> 
>   x1 = -sqrt(t1);
>   x2 = -sqrt(t2);
>   x3 =  sqrt(t1);
>   x4 =  sqrt(t2);
> 
> endfunction
octave:22> 
octave:22> 
octave:22> A = [];
octave:23> 
octave:23> for alpha = 1:10
>  A(alpha,1) = 1;
>  A(alpha,2) = 0;
>  A(alpha,3) = (1+10^(2*alpha))/10^alpha;
>  A(alpha,4) = 0;
>  A(alpha,5) = 1;
> endfor
octave:24> 
octave:24> my_solutions = [];
octave:25> oc_solutions = [];
octave:26> 
octave:26> for alpha = 1:10
>   my_solutions = [ my_solutions ; my_roots(alpha) ];
>   oc_solutions = [ oc_solutions ; roots(A(alpha, :))  ]
> endfor
oc_solutions =

   0.00000 + 3.16228i
   0.00000 - 3.16228i
   0.00000 + 0.31623i
   0.00000 - 0.31623i

oc_solutions =

    0.00000 +  3.16228i
    0.00000 -  3.16228i
    0.00000 +  0.31623i
    0.00000 -  0.31623i
   -0.00000 + 10.00000i
   -0.00000 - 10.00000i
    0.00000 +  0.10000i
    0.00000 -  0.10000i

oc_solutions =

    0.000000 +  3.162278i
    0.000000 -  3.162278i
    0.000000 +  0.316228i
    0.000000 -  0.316228i
   -0.000000 + 10.000000i
   -0.000000 - 10.000000i
    0.000000 +  0.100000i
    0.000000 -  0.100000i
    0.000000 + 31.622777i
    0.000000 - 31.622777i
    0.000000 +  0.031623i
    0.000000 -  0.031623i

oc_solutions =

   1.3263e-16 + 3.1623e+00i
   1.3263e-16 - 3.1623e+00i
   7.9689e-18 + 3.1623e-01i
   7.9689e-18 - 3.1623e-01i
  -1.0192e-17 + 1.0000e+01i
  -1.0192e-17 - 1.0000e+01i
   5.5375e-20 + 1.0000e-01i
   5.5375e-20 - 1.0000e-01i
   1.9597e-17 + 3.1623e+01i
   1.9597e-17 - 3.1623e+01i
   2.1435e-19 + 3.1623e-02i
   2.1435e-19 - 3.1623e-02i
  -2.4633e-16 + 1.0000e+02i
  -2.4633e-16 - 1.0000e+02i
   6.3796e-23 + 1.0000e-02i
   6.3796e-23 - 1.0000e-02i

oc_solutions =

   1.3263e-16 + 3.1623e+00i
   1.3263e-16 - 3.1623e+00i
   7.9689e-18 + 3.1623e-01i
   7.9689e-18 - 3.1623e-01i
  -1.0192e-17 + 1.0000e+01i
  -1.0192e-17 - 1.0000e+01i
   5.5375e-20 + 1.0000e-01i
   5.5375e-20 - 1.0000e-01i
   1.9597e-17 + 3.1623e+01i
   1.9597e-17 - 3.1623e+01i
   2.1435e-19 + 3.1623e-02i
   2.1435e-19 - 3.1623e-02i
  -2.4633e-16 + 1.0000e+02i
  -2.4633e-16 - 1.0000e+02i
   6.3796e-23 + 1.0000e-02i
   6.3796e-23 - 1.0000e-02i
   8.3301e-15 + 3.1623e+02i
   8.3301e-15 - 3.1623e+02i
  -1.6851e-24 + 3.1623e-03i
  -1.6851e-24 - 3.1623e-03i

oc_solutions =

   1.3263e-16 + 3.1623e+00i
   1.3263e-16 - 3.1623e+00i
   7.9689e-18 + 3.1623e-01i
   7.9689e-18 - 3.1623e-01i
  -1.0192e-17 + 1.0000e+01i
  -1.0192e-17 - 1.0000e+01i
   5.5375e-20 + 1.0000e-01i
   5.5375e-20 - 1.0000e-01i
   1.9597e-17 + 3.1623e+01i
   1.9597e-17 - 3.1623e+01i
   2.1435e-19 + 3.1623e-02i
   2.1435e-19 - 3.1623e-02i
  -2.4633e-16 + 1.0000e+02i
  -2.4633e-16 - 1.0000e+02i
   6.3796e-23 + 1.0000e-02i
   6.3796e-23 - 1.0000e-02i
   8.3301e-15 + 3.1623e+02i
   8.3301e-15 - 3.1623e+02i
  -1.6851e-24 + 3.1623e-03i
  -1.6851e-24 - 3.1623e-03i
   3.9031e-16 + 1.0000e+03i
   3.9031e-16 - 1.0000e+03i
  -1.6939e-21 + 1.0000e-03i
  -1.6939e-21 - 1.0000e-03i

oc_solutions =

   1.3263e-16 + 3.1623e+00i
   1.3263e-16 - 3.1623e+00i
   7.9689e-18 + 3.1623e-01i
   7.9689e-18 - 3.1623e-01i
  -1.0192e-17 + 1.0000e+01i
  -1.0192e-17 - 1.0000e+01i
   5.5375e-20 + 1.0000e-01i
   5.5375e-20 - 1.0000e-01i
   1.9597e-17 + 3.1623e+01i
   1.9597e-17 - 3.1623e+01i
   2.1435e-19 + 3.1623e-02i
   2.1435e-19 - 3.1623e-02i
  -2.4633e-16 + 1.0000e+02i
  -2.4633e-16 - 1.0000e+02i
   6.3796e-23 + 1.0000e-02i
   6.3796e-23 - 1.0000e-02i
   8.3301e-15 + 3.1623e+02i
   8.3301e-15 - 3.1623e+02i
  -1.6851e-24 + 3.1623e-03i
  -1.6851e-24 - 3.1623e-03i
   3.9031e-16 + 1.0000e+03i
   3.9031e-16 - 1.0000e+03i
  -1.6939e-21 + 1.0000e-03i
  -1.6939e-21 - 1.0000e-03i
  -2.6729e-14 + 3.1623e+03i
  -2.6729e-14 - 3.1623e+03i
  -1.2360e-26 + 3.1623e-04i
  -1.2360e-26 - 3.1623e-04i

oc_solutions =

   1.3263e-16 + 3.1623e+00i
   1.3263e-16 - 3.1623e+00i
   7.9689e-18 + 3.1623e-01i
   7.9689e-18 - 3.1623e-01i
  -1.0192e-17 + 1.0000e+01i
  -1.0192e-17 - 1.0000e+01i
   5.5375e-20 + 1.0000e-01i
   5.5375e-20 - 1.0000e-01i
   1.9597e-17 + 3.1623e+01i
   1.9597e-17 - 3.1623e+01i
   2.1435e-19 + 3.1623e-02i
   2.1435e-19 - 3.1623e-02i
  -2.4633e-16 + 1.0000e+02i
  -2.4633e-16 - 1.0000e+02i
   6.3796e-23 + 1.0000e-02i
   6.3796e-23 - 1.0000e-02i
   8.3301e-15 + 3.1623e+02i
   8.3301e-15 - 3.1623e+02i
  -1.6851e-24 + 3.1623e-03i
  -1.6851e-24 - 3.1623e-03i
   3.9031e-16 + 1.0000e+03i
   3.9031e-16 - 1.0000e+03i
  -1.6939e-21 + 1.0000e-03i
  -1.6939e-21 - 1.0000e-03i
  -2.6729e-14 + 3.1623e+03i
  -2.6729e-14 - 3.1623e+03i
  -1.2360e-26 + 3.1623e-04i
  -1.2360e-26 - 3.1623e-04i
  -1.0514e-13 + 1.0000e+04i
  -1.0514e-13 - 1.0000e+04i
  -1.7807e-26 + 1.0000e-04i
  -1.7807e-26 - 1.0000e-04i

oc_solutions =

   1.3263e-16 + 3.1623e+00i
   1.3263e-16 - 3.1623e+00i
   7.9689e-18 + 3.1623e-01i
   7.9689e-18 - 3.1623e-01i
  -1.0192e-17 + 1.0000e+01i
  -1.0192e-17 - 1.0000e+01i
   5.5375e-20 + 1.0000e-01i
   5.5375e-20 - 1.0000e-01i
   1.9597e-17 + 3.1623e+01i
   1.9597e-17 - 3.1623e+01i
   2.1435e-19 + 3.1623e-02i
   2.1435e-19 - 3.1623e-02i
  -2.4633e-16 + 1.0000e+02i
  -2.4633e-16 - 1.0000e+02i
   6.3796e-23 + 1.0000e-02i
   6.3796e-23 - 1.0000e-02i
   8.3301e-15 + 3.1623e+02i
   8.3301e-15 - 3.1623e+02i
  -1.6851e-24 + 3.1623e-03i
  -1.6851e-24 - 3.1623e-03i
   3.9031e-16 + 1.0000e+03i
   3.9031e-16 - 1.0000e+03i
  -1.6939e-21 + 1.0000e-03i
  -1.6939e-21 - 1.0000e-03i
  -2.6729e-14 + 3.1623e+03i
  -2.6729e-14 - 3.1623e+03i
  -1.2360e-26 + 3.1623e-04i
  -1.2360e-26 - 3.1623e-04i
  -1.0514e-13 + 1.0000e+04i
  -1.0514e-13 - 1.0000e+04i
  -1.7807e-26 + 1.0000e-04i
  -1.7807e-26 - 1.0000e-04i
  -5.2736e-15 + 3.1623e+04i
  -5.2736e-15 - 3.1623e+04i
   1.8493e-27 + 3.1623e-05i
   1.8493e-27 - 3.1623e-05i

oc_solutions =

   1.3263e-16 + 3.1623e+00i
   1.3263e-16 - 3.1623e+00i
   7.9689e-18 + 3.1623e-01i
   7.9689e-18 - 3.1623e-01i
  -1.0192e-17 + 1.0000e+01i
  -1.0192e-17 - 1.0000e+01i
   5.5375e-20 + 1.0000e-01i
   5.5375e-20 - 1.0000e-01i
   1.9597e-17 + 3.1623e+01i
   1.9597e-17 - 3.1623e+01i
   2.1435e-19 + 3.1623e-02i
   2.1435e-19 - 3.1623e-02i
  -2.4633e-16 + 1.0000e+02i
  -2.4633e-16 - 1.0000e+02i
   6.3796e-23 + 1.0000e-02i
   6.3796e-23 - 1.0000e-02i
   8.3301e-15 + 3.1623e+02i
   8.3301e-15 - 3.1623e+02i
  -1.6851e-24 + 3.1623e-03i
  -1.6851e-24 - 3.1623e-03i
   3.9031e-16 + 1.0000e+03i
   3.9031e-16 - 1.0000e+03i
  -1.6939e-21 + 1.0000e-03i
  -1.6939e-21 - 1.0000e-03i
  -2.6729e-14 + 3.1623e+03i
  -2.6729e-14 - 3.1623e+03i
  -1.2360e-26 + 3.1623e-04i
  -1.2360e-26 - 3.1623e-04i
  -1.0514e-13 + 1.0000e+04i
  -1.0514e-13 - 1.0000e+04i
  -1.7807e-26 + 1.0000e-04i
  -1.7807e-26 - 1.0000e-04i
  -5.2736e-15 + 3.1623e+04i
  -5.2736e-15 - 3.1623e+04i
   1.8493e-27 + 3.1623e-05i
   1.8493e-27 - 3.1623e-05i
  -1.0196e-12 + 1.0000e+05i
  -1.0196e-12 - 1.0000e+05i
  -4.2199e-30 + 1.0000e-05i
  -4.2199e-30 - 1.0000e-05i

octave:27> or
error: Invalid call to or.  Correct usage is:

 -- Built-in Function: or (X, Y)
 -- Built-in Function: or (X1, X2, ...)


Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
octave:27> 
octave:27> % errori relativi = my_solutions./oc_solutions
octave:27> error_relativ = [];
octave:28> 
octave:28> for a = 1:10
>   error_relativ = [ error_relativ ; my_solutions./oc_solutions ];
> endfuntcion
> 
> 
> error_relativ
> 
> 
> 
> 
> 
> 
> 
> 
> 
> clear
> clc
> 
parse error:

  syntax error



octave:28> 
octave:28> function [x1,x2,x3,x4] = my_roots(alpha)
>   
>   b = (1+10^(2*alpha))/10^alpha;
>   t1 = (b + sqrt(b^2-4))/2;
>   t2 = (b - sqrt(b^2-4))/2;
> 
>   x1 = -sqrt(t1);
>   x2 = -sqrt(t2);
>   x3 =  sqrt(t1);
>   x4 =  sqrt(t2);
> 
> endfunction
octave:29> 
octave:29> 
octave:29> A = [];
octave:30> 
octave:30> for alpha = 1:10
>  A(alpha,1) = 1;
>  A(alpha,2) = 0;
>  A(alpha,3) = (1+10^(2*alpha))/10^alpha;
>  A(alpha,4) = 0;
>  A(alpha,5) = 1;
> endfor
octave:31> 
octave:31> my_solutions = [];
octave:32> oc_solutions = [];
octave:33> 
octave:33> for alpha = 1:10
>   my_solutions = [ my_solutions ; my_roots(alpha) ];
>   oc_solutions = [ oc_solutions ; roots(A(alpha, :))];
> endfor
octave:34> 
octave:34> 
octave:34> for a = 1:10
>   my_solutions(a,:) = sort(my_solutions(a,:));
>   oc_solutions(a,:) = sort(oc_solutions(a,:));
> endfor
octave:35> 
octave:35> % errori relativi = my_solutions./oc_solutions
octave:35> error_relativ = [];
octave:36> 
octave:36> for a = 1:10
>   error_relativ = [ error_relativ ; my_solutions./oc_solutions ];
> endfuntcion
> 
> 
> error_relativ
> 
> 
> 
> 
> 
> 
parse error:

  syntax error



octave:36> run esercizio8
parse error near line 55 of file /home/lpatta/esercizio8.m

  syntax error


error: called from 'run' in file /usr/share/octave/3.8.1/m/miscellaneous/run.m near line 80, column 5
octave:36> 
octave:2> run esercizio8
parse error near line 56 of file /home/lpatta/esercizio8.m

  syntax error


error: called from 'run' in file /usr/share/octave/3.8.1/m/miscellaneous/run.m near line 80, column 5
octave:2> load esercizio8.m
octave:3> run esercizio8
quotient: nonconformant arguments (op1 is 10x1, op2 is 40x1)
error: called from '/home/lpatta/esercizio8.m' in file /home/lpatta/esercizio8.m near line 45, column 17
error: called from:
error:   /usr/share/octave/3.8.1/m/miscellaneous/run.m at line 80, column 5
octave:3> load my_roots.m
octave:4> 
octave:4> load esercizio8.m
octave:5> run esercizio8
quotient: nonconformant arguments (op1 is 10x1, op2 is 40x1)
error: called from '/home/lpatta/esercizio8.m' in file /home/lpatta/esercizio8.m near line 45, column 17
error: called from:
error:   /usr/share/octave/3.8.1/m/miscellaneous/run.m at line 80, column 5
octave:5> run esercizio8.m
quotient: nonconformant arguments (op1 is 10x1, op2 is 40x1)
error: called from '/home/lpatta/esercizio8.m' in file /home/lpatta/esercizio8.m near line 45, column 17
error: called from:
error:   /usr/share/octave/3.8.1/m/miscellaneous/run.m at line 80, column 5
octave:5> 
octave:5> 
octave:5> function [x1,x2,x3,x4] = my_roots(alpha)
>   
>   b = (1+10^(2*alpha))/10^alpha;
>   t1 = (b + sqrt(b^2-4))/2;
>   t2 = (b - sqrt(b^2-4))/2;
> 
>   x1 = -sqrt(t1);
>   x2 = -sqrt(t2);
>   x3 =  sqrt(t1);
>   x4 =  sqrt(t2);
> 
> endfunction
octave:6> 
octave:6> 
octave:6> A = [];
octave:7> 
octave:7> for alpha = 1:10
>  A(alpha,1) = 1;
>  A(alpha,2) = 0;
>  A(alpha,3) = (1+10^(2*alpha))/10^alpha;
>  A(alpha,4) = 0;
>  A(alpha,5) = 1;
> endfor
octave:8> 
octave:8> my_solutions = [];
octave:9> oc_solutions = [];
octave:10> 
octave:10> for alpha = 1:10
>   my_solutions = [ my_solutions ; my_roots(alpha) ];
>   oc_solutions = [ oc_solutions ; roots(A(alpha, :))];
> endfor
octave:11> 
octave:11> 
octave:11> for a = 1:10
>   my_solutions(a,:) = sort(my_solutions(a,:));
>   oc_solutions(a,:) = sort(oc_solutions(a,:));
> endfor
octave:12> A
A =

   1.0000e+00   0.0000e+00   1.0100e+01   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0001e+02   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+03   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+04   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+05   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+06   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+07   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+08   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+09   0.0000e+00   1.0000e+00
   1.0000e+00   0.0000e+00   1.0000e+10   0.0000e+00   1.0000e+00

octave:13> my_solutions 
my_solutions =

  -3.1623e+00
  -1.0000e+01
  -3.1623e+01
  -1.0000e+02
  -3.1623e+02
  -1.0000e+03
  -3.1623e+03
  -1.0000e+04
  -3.1623e+04
  -1.0000e+05

octave:14> oc_solutions 
oc_solutions =

   1.3263e-16 + 3.1623e+00i
   1.3263e-16 - 3.1623e+00i
   7.9689e-18 + 3.1623e-01i
   7.9689e-18 - 3.1623e-01i
  -1.0192e-17 + 1.0000e+01i
  -1.0192e-17 - 1.0000e+01i
   5.5375e-20 + 1.0000e-01i
   5.5375e-20 - 1.0000e-01i
   1.9597e-17 + 3.1623e+01i
   1.9597e-17 - 3.1623e+01i
   2.1435e-19 + 3.1623e-02i
   2.1435e-19 - 3.1623e-02i
  -2.4633e-16 + 1.0000e+02i
  -2.4633e-16 - 1.0000e+02i
   6.3796e-23 + 1.0000e-02i
   6.3796e-23 - 1.0000e-02i
   8.3301e-15 + 3.1623e+02i
   8.3301e-15 - 3.1623e+02i
  -1.6851e-24 + 3.1623e-03i
  -1.6851e-24 - 3.1623e-03i
   3.9031e-16 + 1.0000e+03i
   3.9031e-16 - 1.0000e+03i
  -1.6939e-21 + 1.0000e-03i
  -1.6939e-21 - 1.0000e-03i
  -2.6729e-14 + 3.1623e+03i
  -2.6729e-14 - 3.1623e+03i
  -1.2360e-26 + 3.1623e-04i
  -1.2360e-26 - 3.1623e-04i
  -1.0514e-13 + 1.0000e+04i
  -1.0514e-13 - 1.0000e+04i
  -1.7807e-26 + 1.0000e-04i
  -1.7807e-26 - 1.0000e-04i
  -5.2736e-15 + 3.1623e+04i
  -5.2736e-15 - 3.1623e+04i
   1.8493e-27 + 3.1623e-05i
   1.8493e-27 - 3.1623e-05i
  -1.0196e-12 + 1.0000e+05i
  -1.0196e-12 - 1.0000e+05i
  -4.2199e-30 + 1.0000e-05i
  -4.2199e-30 - 1.0000e-05i

octave:15> 
octave:15> 
octave:15> 
octave:15> 
octave:15> 
octave:15> 
octave:15> 
octave:15> 
octave:15> 
octave:15> 
octave:15> 
octave:15> 
octave:15> 
octave:15> 
octave:15> diary off
octave:2> 
octave:2> 
octave:2> %%% Esercizio 8 %%%%
octave:2> 
octave:2> octave
error: 'octave' undefined near line 1 column 1
octave:2> load my_roots.m
octave:3> a = [ 1, 0, 10, 0, 1]
a =

    1    0   10    0    1

octave:4> a = [ 1, 0, (1+10^2)/10, 0, 1]
a =

    1.00000    0.00000   10.10000    0.00000    1.00000

octave:5> X1 = roots(a)
X1 =

   0.00000 + 3.16228i
   0.00000 - 3.16228i
   0.00000 + 0.31623i
   0.00000 - 0.31623i

octave:6> X2 = my_roots(1)
X2 =

  -3.16228  -0.31623   3.16228   0.31623

octave:7> X2 = X2'
X2 =

  -3.16228
  -0.31623
   3.16228
   0.31623

octave:8> X2 = sort(X2)
X2 =

  -3.16228
  -0.31623
   0.31623
   3.16228

octave:9> X1 = sort(X1)
X1 =

   0.00000 - 0.31623i
   0.00000 + 0.31623i
   0.00000 - 3.16228i
   0.00000 + 3.16228i

octave:10> a
a =

    1.00000    0.00000   10.10000    0.00000    1.00000

octave:11> roots(a)
ans =

   0.00000 + 3.16228i
   0.00000 - 3.16228i
   0.00000 + 0.31623i
   0.00000 - 0.31623i

octave:12> roots(a')
ans =

   0.00000 + 3.16228i
   0.00000 - 3.16228i
   0.00000 + 0.31623i
   0.00000 - 0.31623i

octave:13> a = [ 1, 0, -(1+10^2)/10, 0, 1]
a =

    1.00000    0.00000  -10.10000    0.00000    1.00000

octave:14> roots(a)
ans =

  -3.16228
   3.16228
  -0.31623
   0.31623

octave:15> load my_roots
error: load: unable to find file my_roots
octave:15> load my_roots.m
octave:16> my_roots(1)
ans =

 Columns 1 through 3:

  -0.00000 - 0.31623i  -0.00000 - 3.16228i   0.00000 + 0.31623i

 Column 4:

   0.00000 + 3.16228i

octave:17> load my_roots.m
octave:18> my_roots(1)
ans =

 Columns 1 through 3:

  -0.00000 - 0.31623i  -0.00000 - 3.16228i   0.00000 + 0.31623i

 Column 4:

   0.00000 + 3.16228i

octave:19> my_roots(1)
ans =

  -3.16228  -0.31623   3.16228   0.31623

octave:20> help my_roots
error: help: 'my_roots' is not documented
octave:20> lookfor my_roots
octave:21> lookfor my_roots.m
octave:22> lookup 
error: Invalid call to lookup.  Correct usage is:

 -- Built-in Function: IDX = lookup (TABLE, Y)
 -- Built-in Function: IDX = lookup (TABLE, Y, OPT)


Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
octave:22> lookup my_roots
error: Invalid call to lookup.  Correct usage is:

 -- Built-in Function: IDX = lookup (TABLE, Y)
 -- Built-in Function: IDX = lookup (TABLE, Y, OPT)


Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
octave:22> lookup my_roots.m
error: Invalid call to lookup.  Correct usage is:

 -- Built-in Function: IDX = lookup (TABLE, Y)
 -- Built-in Function: IDX = lookup (TABLE, Y, OPT)


Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
octave:22> 
octave:22> 
octave:22> 
octave:22> 
octave:22> A = [];
octave:23> for i=1:10
>  A = (A; my_roots(i));
parse error:

  syntax error

>>>  A = (A; my_roots(i));
           ^

octave:23>  A = [A ; my_roots(i)];
octave:24> endfor
parse error:

  syntax error

>>> endfor
         ^

octave:24> end
parse error:

  syntax error

>>> end
      ^

octave:24> clear
octave:25> clc
octave:26> A = []
A = [](0x0)
octave:27> for i=1:10
> A = [ A ; my_roots(i) ];
> endfor
octave:28> A
A =

  -3.1623e+00  -3.1623e-01   3.1623e+00   3.1623e-01
  -1.0000e+01  -1.0000e-01   1.0000e+01   1.0000e-01
  -3.1623e+01  -3.1623e-02   3.1623e+01   3.1623e-02
  -1.0000e+02  -1.0000e-02   1.0000e+02   1.0000e-02
  -3.1623e+02  -3.1623e-03   3.1623e+02   3.1623e-03
  -1.0000e+03  -1.0000e-03   1.0000e+03   1.0000e-03
  -3.1623e+03  -3.1568e-04   3.1623e+03   3.1568e-04
  -1.0000e+04  -8.6317e-05   1.0000e+04   8.6317e-05
  -3.1623e+04  -0.0000e+00   3.1623e+04   0.0000e+00
  -1.0000e+05  -0.0000e+00   1.0000e+05   0.0000e+00

octave:29> B = []
B = [](0x0)
octave:30> for i=1:10
> B = [ B; roots(1,0,(1+10^(i*2))/10^i, 0, 1)];
> endfor
error: Invalid call to roots.  Correct usage is:

 -- Function File: roots (V)


Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
octave:30> B = []
B = [](0x0)
octave:31> for i=1:10
> B = [ B; roots([1,0,(1+10^(i*2))/10^i, 0, 1])];
> endfor
octave:32> B
B =

   1.3263e-16 + 3.1623e+00i
   1.3263e-16 - 3.1623e+00i
   7.9689e-18 + 3.1623e-01i
   7.9689e-18 - 3.1623e-01i
  -1.0192e-17 + 1.0000e+01i
  -1.0192e-17 - 1.0000e+01i
   5.5375e-20 + 1.0000e-01i
   5.5375e-20 - 1.0000e-01i
   1.9597e-17 + 3.1623e+01i
   1.9597e-17 - 3.1623e+01i
   2.1435e-19 + 3.1623e-02i
   2.1435e-19 - 3.1623e-02i
  -2.4633e-16 + 1.0000e+02i
  -2.4633e-16 - 1.0000e+02i
   6.3796e-23 + 1.0000e-02i
   6.3796e-23 - 1.0000e-02i
   8.3301e-15 + 3.1623e+02i
   8.3301e-15 - 3.1623e+02i
  -1.6851e-24 + 3.1623e-03i
  -1.6851e-24 - 3.1623e-03i
   3.9031e-16 + 1.0000e+03i
   3.9031e-16 - 1.0000e+03i
  -1.6939e-21 + 1.0000e-03i
  -1.6939e-21 - 1.0000e-03i
  -2.6729e-14 + 3.1623e+03i
  -2.6729e-14 - 3.1623e+03i
  -1.2360e-26 + 3.1623e-04i
  -1.2360e-26 - 3.1623e-04i
  -1.0514e-13 + 1.0000e+04i
  -1.0514e-13 - 1.0000e+04i
  -1.7807e-26 + 1.0000e-04i
  -1.7807e-26 - 1.0000e-04i
  -5.2736e-15 + 3.1623e+04i
  -5.2736e-15 - 3.1623e+04i
   1.8493e-27 + 3.1623e-05i
   1.8493e-27 - 3.1623e-05i
  -1.0196e-12 + 1.0000e+05i
  -1.0196e-12 - 1.0000e+05i
  -4.2199e-30 + 1.0000e-05i
  -4.2199e-30 - 1.0000e-05i

octave:33> B = []
B = [](0x0)
octave:34> for i=1:10
> B = [ B; roots([1,0,-(1+10^(i*2))/10^i, 0, 1])];
> endfor
octave:35> B
B =

  -3.1623e+00
   3.1623e+00
  -3.1623e-01
   3.1623e-01
  -1.0000e+01
   1.0000e+01
  -1.0000e-01
   1.0000e-01
  -3.1623e+01
   3.1623e+01
  -3.1623e-02
   3.1623e-02
  -1.0000e+02
   1.0000e+02
  -1.0000e-02
   1.0000e-02
  -3.1623e+02
   3.1623e+02
  -3.1623e-03
   3.1623e-03
  -1.0000e+03
   1.0000e+03
  -1.0000e-03
   1.0000e-03
  -3.1623e+03
   3.1623e+03
  -3.1623e-04
   3.1623e-04
  -1.0000e+04
   1.0000e+04
  -1.0000e-04
   1.0000e-04
  -3.1623e+04
   3.1623e+04
   3.1623e-05
  -3.1623e-05
  -1.0000e+05
   1.0000e+05
  -1.0000e-05
   1.0000e-05

octave:36> B = []
B = [](0x0)
octave:37> for i=1:10
> B = [ B; roots([1,0,(1+10^(i*2))/10^i, 0, 1])'];
> endfor
octave:38> B
B =

 Columns 1 and 2:

   1.3263e-16 - 3.1623e+00i   1.3263e-16 + 3.1623e+00i
  -1.0192e-17 - 1.0000e+01i  -1.0192e-17 + 1.0000e+01i
   1.9597e-17 - 3.1623e+01i   1.9597e-17 + 3.1623e+01i
  -2.4633e-16 - 1.0000e+02i  -2.4633e-16 + 1.0000e+02i
   8.3301e-15 - 3.1623e+02i   8.3301e-15 + 3.1623e+02i
   3.9031e-16 - 1.0000e+03i   3.9031e-16 + 1.0000e+03i
  -2.6729e-14 - 3.1623e+03i  -2.6729e-14 + 3.1623e+03i
  -1.0514e-13 - 1.0000e+04i  -1.0514e-13 + 1.0000e+04i
  -5.2736e-15 - 3.1623e+04i  -5.2736e-15 + 3.1623e+04i
  -1.0196e-12 - 1.0000e+05i  -1.0196e-12 + 1.0000e+05i

 Columns 3 and 4:

   7.9689e-18 - 3.1623e-01i   7.9689e-18 + 3.1623e-01i
   5.5375e-20 - 1.0000e-01i   5.5375e-20 + 1.0000e-01i
   2.1435e-19 - 3.1623e-02i   2.1435e-19 + 3.1623e-02i
   6.3796e-23 - 1.0000e-02i   6.3796e-23 + 1.0000e-02i
  -1.6851e-24 - 3.1623e-03i  -1.6851e-24 + 3.1623e-03i
  -1.6939e-21 - 1.0000e-03i  -1.6939e-21 + 1.0000e-03i
  -1.2360e-26 - 3.1623e-04i  -1.2360e-26 + 3.1623e-04i
  -1.7807e-26 - 1.0000e-04i  -1.7807e-26 + 1.0000e-04i
   1.8493e-27 - 3.1623e-05i   1.8493e-27 + 3.1623e-05i
  -4.2199e-30 - 1.0000e-05i  -4.2199e-30 + 1.0000e-05i

octave:47> 
octave:47> 
octave:47> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
octave:47> %%%%%%%%%% 9 %%%%%%%%%%%%%%%%%%
octave:47> 
octave:47> 
octave:47> realmin
ans =   2.2251e-308
octave:48> format long
octave:49> log(10)
ans =  2.30258509299405
octave:50> log(2)
ans =  0.693147180559945
octave:51> log(10)
ans =  2.30258509299405
octave:52> log(q)
error: 'q' undefined near line 1 column 5
error: evaluating argument list element number 1
octave:52> log(1)
ans = 0
octave:53> log(2)
ans =  0.693147180559945
octave:54> log(3)
ans =  1.09861228866811
octave:55> log(4)
ans =  1.38629436111989
octave:56> log(5)
ans =  1.60943791243410
octave:57> log(6)
ans =  1.79175946922805
octave:58> log(7)
ans =  1.94591014905531
octave:59> log(8)
ans =  2.07944154167984
octave:60> 
octave:60> man log
error: 'man' undefined near line 1 column 1
octave:60> help log
'log' is a built-in function from the file libinterp/corefcn/mappers.cc

 -- Mapping Function: log (X)
     Compute the natural logarithm, 'ln (X)', for each element of X.  To
     compute the matrix logarithm, see *note Linear Algebra::.

     See also: exp, log1p, log2, log10, logspace.


Additional help for built-in functions and operators is
available in the online version of the manual.  Use the command
'doc <topic>' to search the manual index.

Help and information about Octave is also available on the WWW
at http://www.octave.org and via the help@octave.org
mailing list.
octave:61> help ln
error: help: 'ln' not found
octave:61> doc log10
octave:62> log10(10)
ans =  1
octave:63> log10(20)
ans =  1.30102999566398
octave:64> log10(100)
ans =  2
octave:65> m = log10(realmin)
m = -307.652655568589
octave:66> a = logspace(-m,-m-20)
a =

 Columns 1 through 6:

   4.49423283715582e+307   1.75586977579055e+307   6.86007775130380e+306   2.68019117378674e+306   1.04713459358082e+306   4.09109196313270e+305

 Columns 7 through 12:

   1.59836505769255e+305   6.24471627789216e+304   2.43977314216708e+304   9.53204712648533e+303   3.72411356003553e+303   1.45498879978288e+303

 Columns 13 through 18:

   5.68455384983861e+302   2.22092104602739e+302   8.67700513176910e+301   3.39005378833394e+301   1.32447365344045e+301   5.17463901220289e+300

 Columns 19 through 24:

   2.02170038166180e+300   7.89866196187267e+299   3.08595978681330e+299   1.20566595352464e+299   4.71046446457224e+298   1.84035017387130e+298

 Columns 25 through 30:

   7.19013759246378e+297   2.80914357129131e+297   1.09751552075992e+297   4.28792721959401e+296   1.67526741014146e+296   6.54516914992827e+295

 Columns 31 through 36:

   2.55715827466313e+295   9.99066378865060e+294   3.90329233535676e+294   1.52499287110038e+294   5.95805555182537e+293   2.32777651826184e+293

 Columns 37 through 42:

   9.09448304373471e+292   3.55315990104361e+292   1.38819823201276e+292   5.42360711319902e+291   2.11897072334525e+291   8.27869134448667e+290

 Columns 43 through 48:

   3.23443498403218e+290   1.26367432129230e+290   4.93709967328703e+289   1.92889518867860e+289   7.53607764704056e+288   2.94430027279659e+288

 Columns 49 and 50:

   1.15032043224708e+288   4.49423283715582e+287

octave:67> a = logspace(-m,-m-20,21)
a =

 Columns 1 through 6:

   4.49423283715582e+307   4.49423283715582e+306   4.49423283715582e+305   4.49423283715582e+304   4.49423283715582e+303   4.49423283715582e+302

 Columns 7 through 12:

   4.49423283715582e+301   4.49423283715582e+300   4.49423283715582e+299   4.49423283715582e+298   4.49423283715582e+297   4.49423283715582e+296

 Columns 13 through 18:

   4.49423283715582e+295   4.49423283715582e+294   4.49423283715582e+293   4.49423283715582e+292   4.49423283715582e+291   4.49423283715582e+290

 Columns 19 through 21:

   4.49423283715582e+289   4.49423283715582e+288   4.49423283715582e+287

octave:68> 
octave:68> 
octave:68> 
octave:68> realmax
ans =   1.79769313486232e+308
octave:69> 
octave:69> 
octave:69> 
octave:69> 
octave:69> realmax*10
ans = Inf
octave:70> realmax(1+eps)
ans =   1.79769313486232e+308
octave:71> 1+10^-17
ans =  1
octave:72> 1+10^17
ans =  100000000000000000
octave:73> 1+10^18
ans =  1000000000000000000
octave:74> 1+10^19
ans =    1.00000000000000e+19
octave:75> 1+10^20
ans =    1.00000000000000e+20
octave:76> 1+10^1234
ans = Inf
octave:77> 1+10^12
ans =  1000000000001
octave:78> 1+10^50
ans =    1.00000000000000e+50
octave:79> 1+10^60
ans =    1.00000000000000e+60
octave:80> 1,123+10^60
ans =  1
ans =    1.00000000000000e+60
octave:81> 2+10^60
ans =    1.00000000000000e+60
octave:82> diary off
